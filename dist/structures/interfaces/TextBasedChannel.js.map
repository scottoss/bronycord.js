{"version":3,"file":"TextBasedChannel.js","sourceRoot":"","sources":["../../../src/structures/interfaces/TextBasedChannel.ts"],"names":[],"mappings":";;;AAAA,6BAA+D;AAC/D,wCAAoC;AAEpC,MAAsB,gBAAiB,SAAQ,iBAAO;IAAtD;;QACI,kBAAa,GAAkB,IAAI,CAAA;QACnC,aAAQ,GAAG,IAAI,kBAAc,CAAC,IAAI,CAAC,CAAA;IAUvC,CAAC;IARG,IAAI,CAAC,OAAgC;QACjC,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;IACtC,CAAC;IAED,IAAI,WAAW;;QACX,IAAI,CAAC,IAAI,CAAC,aAAa;YAAE,OAAO,IAAI,CAAA;QACpC,OAAO,MAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,mCAAI,IAAI,CAAA;IAC9D,CAAC;CACJ;AAZD,4CAYC","sourcesContent":["import { Message, MessageManager, MessageOptions } from '../..'\nimport { Channel } from '../Channel'\n\nexport abstract class TextBasedChannel extends Channel {\n    lastMessageId: string | null = null\n    messages = new MessageManager(this)\n\n    send(options: MessageOptions | string): Promise<Message> {\n        return this.messages.send(options)\n    }\n\n    get lastMessage(): Message | null {\n        if (!this.lastMessageId) return null\n        return this.messages.cache.get(this.lastMessageId) ?? null\n    }\n}\n"]}