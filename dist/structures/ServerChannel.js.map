{"version":3,"file":"ServerChannel.js","sourceRoot":"","sources":["../../src/structures/ServerChannel.ts"],"names":[],"mappings":";;;AACA,wBAA6C;AAE7C,kCAAwD;AAExD,MAAa,aAAc,SAAQ,UAAO;IAMtC,YAAY,MAAc,EAAE,IAAsB;QAC9C,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAA;QAJtC,gBAAW,GAAkB,IAAI,CAAA;QACjC,SAAI,GAAkB,IAAI,CAAA;QAC1B,eAAU,GAAG,IAAI,iBAAU,EAA8B,CAAA;QAGrD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;IACrB,CAAC;IAGD,MAAM,CAAC,IAAsB;;QACzB,IAAI,IAAI,CAAC,IAAI,EAAE;YACX,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAA;SACxB;QAED,IAAI,IAAI,CAAC,MAAM,EAAE;YACb,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAA;SAC9B;QAED,IAAI,aAAa,IAAI,IAAI,EAAE;YACvB,IAAI,CAAC,WAAW,GAAG,MAAA,IAAI,CAAC,WAAW,mCAAI,IAAI,CAAA;SAC9C;QAED,IAAI,MAAM,IAAI,IAAI,EAAE;YAChB,IAAI,CAAC,IAAI,GAAG,MAAA,MAAA,IAAI,CAAC,IAAI,0CAAE,GAAG,mCAAI,IAAI,CAAA;SACrC;QAED,OAAO,IAAI,CAAA;IACf,CAAC;IAED,OAAO,CAAC,IAAsB;QAC1B,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE,CAAA;QAC3B,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;QAClB,OAAO,KAAK,CAAA;IAChB,CAAC;IAED,KAAK,CAAC,YAAY;QACd,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,IAAI,CAAC,EAAE,UAAU,CAAC,CAAA;QAC3E,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;IAC7C,CAAC;IAED,OAAO,CAAC,OAA0B;QAC9B,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAA;IAClF,CAAC;IAED,IAAI,MAAM;QACN,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAW,CAAA;IACjE,CAAC;IAED,IAAI,QAAQ;;QACR,OAAO,MAAA,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,mCAAI,IAAI,CAAA;IACtF,CAAC;CACJ;AAtDD,sCAsDC","sourcesContent":["import { ServerChannel as RawServerChannel } from 'revolt-api/types/Channels'\nimport { Category, Channel, Server } from '.'\nimport { Client } from '../client/Client'\nimport { ChannelPermissions, Collection } from '../util'\n\nexport class ServerChannel extends Channel {\n    name!: string\n    serverId!: string\n    description: string | null = null\n    icon: string | null = null\n    overwrites = new Collection<string, ChannelPermissions>()\n    constructor(client: Client, data: RawServerChannel) {\n        super(client, Object.create(data))\n        this._patch(data)\n    }\n\n    // TODO: Add channel overwrites\n    _patch(data: RawServerChannel): this {\n        if (data.name) {\n            this.name = data.name\n        }\n\n        if (data.server) {\n            this.serverId = data.server\n        }\n\n        if ('description' in data) {\n            this.description = data.description ?? null\n        }\n\n        if ('icon' in data) {\n            this.icon = data.icon?._id ?? null\n        }\n\n        return this\n    }\n\n    _update(data: RawServerChannel): this {\n        const clone = this._clone()\n        clone._patch(data)\n        return clone\n    }\n\n    async createInvite(): Promise<string> {\n        const { code } = await this.client.api.post(`/channels/${this.id}/invites`)\n        return this.client.endpoints.invite(code)\n    }\n\n    iconURL(options?: { size: number }): string | null {\n        return this.icon ? this.client.endpoints.icon(this.icon, options?.size) : null\n    }\n\n    get server(): Server {\n        return this.client.servers.cache.get(this.serverId) as Server\n    }\n\n    get category(): Category | null {\n        return this.server.categories.find(cat => cat._channels.includes(this.id)) ?? null\n    }\n}\n"]}