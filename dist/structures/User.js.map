{"version":3,"file":"User.js","sourceRoot":"","sources":["../../src/structures/User.ts"],"names":[],"mappings":"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","sourcesContent":["import { Attachment } from 'revolt-api/types/Autumn'\nimport { User as RawUser, Presence as RawPresence } from 'revolt-api/types/Users'\nimport { Base, DMChannel } from '.'\nimport { Client } from '..'\nimport { Badges, Presence, UUID } from '../util'\n\nexport class User extends Base {\n    username!: string\n    id!: string\n    avatar: Attachment | null = null\n    status = {\n        text: null,\n        presence: Presence.INVISIBLE\n    } as {\n        text: string | null\n        presence: Presence\n    }\n    badges!: Badges\n    constructor(client: Client, data: RawUser) {\n        super(client)\n        this._patch(data)\n    }\n\n    _patch(data: RawUser): this {\n        if (!data) return this\n\n        if (data._id) {\n            this.id = data._id\n        }\n\n        if (data.username) {\n            this.username = data.username\n        }\n\n        if (typeof data.badges === 'number') {\n            this.badges = new Badges(data.badges).freeze()\n        }\n\n        if ('avatar' in data) {\n            this.avatar = data.avatar ?? null\n        }\n\n        if ('status' in data) {\n            const presence = data.status?.presence ? Presence[data.status.presence.toUpperCase() as Uppercase<RawPresence>] : Presence.INVISIBLE\n            this.status.presence = presence\n            this.status.text = data.status?.text ?? null\n        }\n\n        return this\n    }\n\n    _update(data: RawUser): this {\n        const clone = this._clone()\n        clone._patch(data)\n        return clone\n    }\n\n    get createdAt(): Date {\n        return UUID.extrectTime(this.id)\n    }\n\n    get createdTimestamp(): number {\n        return this.createdAt.getTime()\n    }\n\n    async block(): Promise<void> {\n        await this.client.api.put(`/users/${this.id}/block`)\n    }\n\n    async unblock(): Promise<void> {\n        await this.client.api.delete(`/users/${this.id}/block`)\n    }\n\n    async createDM(): Promise<DMChannel> {\n        const data = await this.client.api.get(`/users/${this.id}/dm`)\n        return this.client.channels._add(data) as DMChannel\n    }\n\n    avatarURL(options?: { size: number }): string | null {\n        return this.avatar ? this.client.endpoints.avatar(this.avatar._id, this.avatar.filename, options?.size) : null\n    }\n\n    displayAvatarURL(options?: { size: number }): string {\n        return this.avatarURL(options) ?? `${this.client.options.http.api}/users/${this.id}/default_avatar`\n    }\n\n    fetch(force = true): Promise<User> {\n        return this.client.users.fetch(this, { force })\n    }\n\n    toString(): string {\n        return `<@${this.id}>`\n    }\n}\n"]}