{"version":3,"file":"Server.js","sourceRoot":"","sources":["../../src/structures/Server.ts"],"names":[],"mappings":"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","sourcesContent":["import { Role as RawRole, Server as RawServer } from 'revolt-api/types/Servers'\nimport { Base, ServerMember, User, Category } from '.'\nimport { Client } from '..'\nimport { RoleManager, ServerChannelManager, ServerMemberManager } from '../managers'\nimport { Collection, ServerPermissions, UUID } from '../util'\n\nexport class Server extends Base {\n    name!: string\n    id!: string\n    description: string | null = null\n    ownerId!: string\n    members: ServerMemberManager\n    channels: ServerChannelManager\n    roles: RoleManager\n    deleted = false\n    icon: string | null = null\n    banner: string | null = null\n    permissions!: ServerPermissions\n    categories = new Collection<string, Category>()\n    _channels: string[] = []\n    _roles: Record<string, RawRole> = {}\n\n    constructor(client: Client, data: RawServer) {\n        super(client)\n        this._patch(data)\n        this.channels = new ServerChannelManager(this)\n        this.roles = new RoleManager(this)\n        this.members = new ServerMemberManager(this)\n    }\n\n    _patch(data: RawServer): this {\n        if (!data) return this\n\n        if (data._id) {\n            this.id = data._id\n        }\n\n        if (Array.isArray(data.categories)) {\n            this.categories.clear()\n            for (const cat of data.categories) {\n                const category = new Category(this, cat)\n                this.categories.set(category.id, category)\n            }\n        }\n\n        if ('icon' in data) {\n            this.icon = data.icon?._id ?? null\n        }\n\n        if ('banner' in data) {\n            this.banner = data.banner?._id ?? null\n        }\n\n        if (data.owner) {\n            this.ownerId = data.owner\n        }\n\n        if (data.name) {\n            this.name = data.name\n        }\n\n        if ('description' in data) {\n            this.description = data.description ?? null\n        }\n\n        if (Array.isArray(data.channels)) {\n            this._channels = [...data.channels]\n        }\n\n        if (typeof data.roles === 'object') {\n            this._roles = { ...data.roles }\n        }\n\n        if (typeof data.default_permissions?.[0] === 'number') {\n            this.permissions = new ServerPermissions(data.default_permissions[0]).freeze()\n        }\n\n        return this\n    }\n\n    _update(data: RawServer): this {\n        const clone = this._clone()\n        clone._patch(data)\n        return clone\n    }\n\n    async ack(): Promise<void> {\n        await this.client.servers.ack(this)\n    }\n\n    async delete(): Promise<void> {\n        await this.client.servers.delete(this)\n    }\n\n    iconURL(options?: { size: number }): string | null {\n        return this.icon ? this.client.endpoints.icon(this.icon, options?.size) : null\n    }\n\n    bannerURL(options?: { size: number }): string | null {\n        return this.banner ? this.client.endpoints.banner(this.banner, options?.size) : null\n    }\n\n    get me(): ServerMember | null {\n        return this.members.cache.get(this.client.user?.id as string) ?? null\n    }\n\n    get createdAt(): Date {\n        return UUID.extrectTime(this.id)\n    }\n\n    get createdTimestamp(): number {\n        return this.createdAt.getTime()\n    }\n\n    get owner(): User | null {\n        return this.client.users.cache.get(this.ownerId) ?? null\n    }\n\n    toString(): string {\n        return this.name\n    }\n}\n"]}