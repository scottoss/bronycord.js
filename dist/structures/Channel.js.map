{"version":3,"file":"Channel.js","sourceRoot":"","sources":["../../src/structures/Channel.ts"],"names":[],"mappings":";;;AACA,wBAAyG;AAGzG,kCAA4C;AAE5C,MAAsB,OAAQ,SAAQ,OAAI;IAItC,YAAY,MAAc,EAAE,GAAe;QACvC,KAAK,CAAC,MAAM,CAAC,CAAA;QAHjB,SAAI,GAA6B,SAAS,CAAA;QAC1C,YAAO,GAAG,KAAK,CAAA;QAGX,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,GAAG,CAAA;IACrB,CAAC;IAED,IAAI,gBAAgB;QAChB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAA;IACnC,CAAC;IAED,IAAI,SAAS;QACT,OAAO,WAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;IACpC,CAAC;IAED,KAAK,CAAC,GAAG;QACL,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;IACxC,CAAC;IAED,KAAK,CAAC,MAAM;QACR,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;IAC3C,CAAC;IAED,MAAM;QACF,OAAO,UAAU,IAAI,IAAI,CAAA;IAC7B,CAAC;IAED,OAAO;QACH,OAAO,IAAI,CAAC,IAAI,KAAK,mBAAY,CAAC,KAAK,CAAA;IAC3C,CAAC;IAED,QAAQ;QACJ,OAAO,UAAU,IAAI,IAAI,CAAA;IAC7B,CAAC;IAED,QAAQ;QACJ,OAAO,KAAK,IAAI,CAAC,EAAE,GAAG,CAAA;IAC1B,CAAC;IAED,KAAK,CAAC,KAAK,GAAG,IAAI;QACd,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,CAAC,CAAA;IACtD,CAAC;IAED,MAAM,CAAC,MAAM,CAAC,MAAc,EAAE,GAAe;QACzC,IAAI,OAAgB,CAAA;QAEpB,QAAQ,GAAG,CAAC,YAAY,EAAE;YACtB,KAAK,aAAa;gBACd,OAAO,GAAG,IAAI,cAAW,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;gBACtC,MAAK;YACT,KAAK,cAAc;gBACf,OAAO,GAAG,IAAI,eAAY,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;gBACvC,MAAK;YACT,KAAK,eAAe;gBAChB,OAAO,GAAG,IAAI,YAAS,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;gBACpC,MAAK;YACT,KAAK,OAAO;gBACR,OAAO,GAAG,IAAI,eAAY,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;gBACvC,MAAK;YACT,KAAK,eAAe;gBAChB,OAAO,GAAG,IAAI,eAAY,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;gBACvC,MAAK;SACZ;QAED,OAAO,OAAO,CAAA;IAClB,CAAC;CACJ;AApED,0BAoEC","sourcesContent":["import { Channel as RawChannel } from 'revolt-api/types/Channels'\nimport { Base, DMChannel, GroupChannel, NotesChannel, ServerChannel, TextChannel, VoiceChannel } from '.'\nimport { TextBasedChannel } from './interfaces/TextBasedChannel'\nimport { Client } from '..'\nimport { ChannelTypes, UUID } from '../util'\n\nexport abstract class Channel extends Base {\n    id: string\n    type: ChannelTypes | 'UNKNOWN' = 'UNKNOWN'\n    deleted = false\n    constructor(client: Client, raw: RawChannel) {\n        super(client)\n        this.id = raw._id\n    }\n\n    get createdTimestamp(): number {\n        return this.createdAt.getTime()\n    }\n\n    get createdAt(): Date {\n        return UUID.extrectTime(this.id)\n    }\n\n    async ack(): Promise<void> {\n        await this.client.channels.ack(this)\n    }\n\n    async delete(): Promise<void> {\n        await this.client.channels.delete(this)\n    }\n\n    isText(): this is TextBasedChannel {\n        return 'messages' in this\n    }\n\n    isVoice(): this is VoiceChannel {\n        return this.type === ChannelTypes.VOICE\n    }\n\n    inServer(): this is ServerChannel {\n        return 'serverId' in this\n    }\n\n    toString(): string {\n        return `<#${this.id}>`\n    }\n\n    fetch(force = true): Promise<Channel> {\n        return this.client.channels.fetch(this, { force })\n    }\n\n    static create(client: Client, raw: RawChannel): Channel {\n        let channel: Channel\n\n        switch (raw.channel_type) {\n            case 'TextChannel':\n                channel = new TextChannel(client, raw)\n                break\n            case 'VoiceChannel':\n                channel = new VoiceChannel(client, raw)\n                break\n            case 'DirectMessage':\n                channel = new DMChannel(client, raw)\n                break\n            case 'Group':\n                channel = new GroupChannel(client, raw)\n                break\n            case 'SavedMessages':\n                channel = new NotesChannel(client, raw)\n                break\n        }\n\n        return channel\n    }\n}\n"]}