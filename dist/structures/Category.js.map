{"version":3,"file":"Category.js","sourceRoot":"","sources":["../../src/structures/Category.ts"],"names":[],"mappings":";;;AACA,wBAA+C;AAC/C,kCAAoC;AAEpC,MAAa,QAAS,SAAQ,OAAI;IAI9B,YAAmB,MAAc,EAAE,IAAiB;QAChD,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;QADL,WAAM,GAAN,MAAM,CAAQ;QADjC,cAAS,GAAa,EAAE,CAAA;QAGpB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;IACrB,CAAC;IAED,MAAM,CAAC,IAAiB;QACpB,IAAI,CAAC,IAAI;YAAE,OAAO,IAAI,CAAA;QAEtB,IAAI,IAAI,CAAC,EAAE,EAAE;YACT,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAA;SACpB;QAED,IAAI,IAAI,CAAC,KAAK,EAAE;YACZ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAA;SACzB;QAED,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YAC9B,IAAI,CAAC,SAAS,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAA;SACtC;QAED,OAAO,IAAI,CAAA;IACf,CAAC;IAED,OAAO,CAAC,IAAiB;QACrB,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE,CAAA;QAC3B,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;QAClB,OAAO,KAAK,CAAA;IAChB,CAAC;IAED,IAAI,QAAQ;QACR,MAAM,IAAI,GAAG,IAAI,iBAAU,EAAyB,CAAA;QAEpD,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,SAAS,EAAE;YACpC,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAA;YACzD,IAAI,OAAO;gBAAE,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,CAAA;SAC7C;QAED,OAAO,IAAI,CAAA;IACf,CAAC;IAED,QAAQ;QACJ,OAAO,IAAI,CAAC,IAAI,CAAA;IACpB,CAAC;CACJ;AA/CD,4BA+CC","sourcesContent":["import { Category as RawCategory } from 'revolt-api/types/Servers'\nimport { Base, Server, ServerChannel } from '.'\nimport { Collection } from '../util'\n\nexport class Category extends Base {\n    id!: string\n    name!: string\n    _channels: string[] = []\n    constructor(public server: Server, data: RawCategory) {\n        super(server.client)\n        this._patch(data)\n    }\n\n    _patch(data: RawCategory): this {\n        if (!data) return this\n\n        if (data.id) {\n            this.id = data.id\n        }\n\n        if (data.title) {\n            this.name = data.title\n        }\n\n        if (Array.isArray(data.channels)) {\n            this._channels = [...data.channels]\n        }\n\n        return this\n    }\n\n    _update(data: RawCategory): this {\n        const clone = this._clone()\n        clone._patch(data)\n        return clone\n    }\n\n    get channels(): Collection<string, ServerChannel> {\n        const coll = new Collection<string, ServerChannel>()\n\n        for (const channelId of this._channels) {\n            const channel = this.server.channels.cache.get(channelId)\n            if (channel) coll.set(channel.id, channel)\n        }\n\n        return coll\n    }\n\n    toString(): string {\n        return this.name\n    }\n}\n"]}