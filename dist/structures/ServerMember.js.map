{"version":3,"file":"ServerMember.js","sourceRoot":"","sources":["../../src/structures/ServerMember.ts"],"names":[],"mappings":";;;AAEA,wBAAsC;AAGtC,MAAa,YAAa,SAAQ,OAAI;IAKlC,YAAY,MAAc,EAAE,IAAe;QACvC,KAAK,CAAC,MAAM,CAAC,CAAA;QAHjB,aAAQ,GAAkB,IAAI,CAAA;QAC9B,WAAM,GAAsB,IAAI,CAAA;QAG5B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;IACrB,CAAC;IAED,MAAM,CAAC,IAAe;;QAClB,IAAI,CAAC,IAAI;YAAE,OAAO,IAAI,CAAA;QAEtB,IAAI,UAAU,IAAI,IAAI,EAAE;YACpB,IAAI,CAAC,QAAQ,GAAG,MAAA,IAAI,CAAC,QAAQ,mCAAI,IAAI,CAAA;SACxC;QAED,IAAI,QAAQ,IAAI,IAAI,EAAE;YAClB,IAAI,CAAC,MAAM,GAAG,MAAA,IAAI,CAAC,MAAM,mCAAI,IAAI,CAAA;SACpC;QAED,IAAI,IAAI,CAAC,GAAG,EAAE;YACV,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAA;YAC/B,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAA;SAC1B;QAED,OAAO,IAAI,CAAA;IACf,CAAC;IAED,OAAO,CAAC,IAAe;QACnB,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE,CAAA;QAC3B,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;QAClB,OAAO,KAAK,CAAA;IAChB,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,QAAiB;QAC/B,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAA;QAClD,OAAO,IAAI,CAAA;IACf,CAAC;IAED,GAAG,CAAC,MAAe;QACf,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;IAChD,CAAC;IAED,IAAI;QACA,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IACzC,CAAC;IAED,KAAK;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;IACpD,CAAC;IAED,gBAAgB,CAAC,OAA0B;QACvC,OAAO,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAA;IAC9C,CAAC;IAED,IAAI,IAAI;QACJ,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAS,CAAA;IACvD,CAAC;IAED,IAAI,MAAM;QACN,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAW,CAAA;IACjE,CAAC;IAED,QAAQ;QACJ,OAAO,KAAK,IAAI,CAAC,EAAE,GAAG,CAAA;IAC1B,CAAC;CACJ;AAnED,oCAmEC","sourcesContent":["import { Attachment } from 'revolt-api/types/Autumn'\nimport { Member as RawMember } from 'revolt-api/types/Servers'\nimport { Base, Server, User } from '.'\nimport { Client } from '..'\n\nexport class ServerMember extends Base {\n    id!: string\n    serverId!: string\n    nickname: string | null = null\n    avatar: Attachment | null = null\n    constructor(client: Client, data: RawMember) {\n        super(client)\n        this._patch(data)\n    }\n\n    _patch(data: RawMember): this {\n        if (!data) return this\n\n        if ('nickname' in data) {\n            this.nickname = data.nickname ?? null\n        }\n\n        if ('avatar' in data) {\n            this.avatar = data.avatar ?? null\n        }\n\n        if (data._id) {\n            this.serverId = data._id.server\n            this.id = data._id.user\n        }\n\n        return this\n    }\n\n    _update(data: RawMember): this {\n        const clone = this._clone()\n        clone._patch(data)\n        return clone\n    }\n\n    async setNickname(nickname?: string): Promise<this> {\n        await this.server.members.edit(this, { nickname })\n        return this\n    }\n\n    ban(reason?: string): Promise<void> {\n        return this.server.members.ban(this, reason)\n    }\n\n    kick(): Promise<void> {\n        return this.server.members.kick(this)\n    }\n\n    leave(): Promise<void> {\n        return this.client.servers.delete(this.serverId)\n    }\n\n    displayAvatarURL(options?: { size: number }): string {\n        return this.user.displayAvatarURL(options)\n    }\n\n    get user(): User {\n        return this.client.users.cache.get(this.id) as User\n    }\n\n    get server(): Server {\n        return this.client.servers.cache.get(this.serverId) as Server\n    }\n\n    toString(): string {\n        return `<@${this.id}>`\n    }\n}\n"]}