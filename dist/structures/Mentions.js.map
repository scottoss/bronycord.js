{"version":3,"file":"Mentions.js","sourceRoot":"","sources":["../../src/structures/Mentions.ts"],"names":[],"mappings":";;;AAAA,wBAAqD;AACrD,sCAAqC;AAErC,kCAAoC;AAEpC,MAAa,QAAS,SAAQ,OAAI;IAE9B,YAAmB,OAAgB;QAC/B,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;QADN,YAAO,GAAP,OAAO,CAAS;QAD3B,WAAM,GAAa,EAAE,CAAA;IAG7B,CAAC;IAED,MAAM,CAAC,OAAiB;QACpB,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAA;QACtB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,CAAA;QAC5B,OAAO,IAAI,CAAA;IACf,CAAC;IAED,OAAO,CAAC,OAAiB;QACrB,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE,CAAA;QAC3B,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA;QACpB,OAAO,KAAK,CAAA;IAChB,CAAC;IAED,GAAG,CAAC,IAAoB;QACpB,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;QAChD,IAAI,CAAC,MAAM;YAAE,MAAM,IAAI,kBAAS,CAAC,cAAc,EAAE,MAAM,EAAE,gBAAgB,CAAC,CAAA;QAC1E,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;IACvC,CAAC;IAED,IAAI,OAAO;QACP,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAA;QAElC,IAAI,CAAC,MAAM;YAAE,OAAO,IAAI,CAAA;QAExB,MAAM,OAAO,GAAG,IAAI,iBAAU,EAAwB,CAAA;QAEtD,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,MAAM,EAAE;YAC9B,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;YAC/C,IAAI,MAAM;gBAAE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAA;SAC7C;QAED,OAAO,OAAO,CAAA;IAClB,CAAC;IAED,IAAI,KAAK;QACL,MAAM,KAAK,GAAG,IAAI,iBAAU,EAAgB,CAAA;QAE5C,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,MAAM,EAAE;YAC9B,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;YAChD,IAAI,IAAI;gBAAE,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;SACrC;QAED,OAAO,KAAK,CAAA;IAChB,CAAC;CACJ;AAjDD,4BAiDC","sourcesContent":["import { Base, Message, ServerMember, User } from '.'\nimport { TypeError } from '../errors'\nimport { UserResolvable } from '../managers'\nimport { Collection } from '../util'\n\nexport class Mentions extends Base {\n    private _users: string[] = []\n    constructor(public message: Message) {\n        super(message.client)\n    }\n\n    _patch(userIds: string[]): this {\n        this._users.length = 0\n        this._users.push(...userIds)\n        return this\n    }\n\n    _update(userIds: string[]): this {\n        const clone = this._clone()\n        this._patch(userIds)\n        return clone\n    }\n\n    has(user: UserResolvable): boolean {\n        const userId = this.client.users.resolveId(user)\n        if (!userId) throw new TypeError('INVALID_TYPE', 'user', 'UserResolvable')\n        return this._users.includes(userId)\n    }\n\n    get members(): Collection<string, ServerMember> | null {\n        const server = this.message.server\n\n        if (!server) return null\n\n        const members = new Collection<string, ServerMember>()\n\n        for (const userId of this._users) {\n            const member = server.members.cache.get(userId)\n            if (member) members.set(member.id, member)\n        }\n\n        return members\n    }\n\n    get users(): Collection<string, User> {\n        const users = new Collection<string, User>()\n\n        for (const userId of this._users) {\n            const user = this.client.users.cache.get(userId)\n            if (user) users.set(user.id, user)\n        }\n\n        return users\n    }\n}\n"]}