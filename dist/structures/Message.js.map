{"version":3,"file":"Message.js","sourceRoot":"","sources":["../../src/structures/Message.ts"],"names":[],"mappings":"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","sourcesContent":["import { Message as RawMessage, SystemMessage } from 'revolt-api/types/Channels'\nimport { Embed } from 'revolt-api/types/January'\nimport { Base, DMChannel, GroupChannel, Mentions, Server, ServerMember, TextChannel, User } from '.'\nimport { Client } from '..'\nimport { MessageTypes, UUID } from '../util'\n\nexport class Message extends Base {\n    content = ''\n    id!: string\n    channelId!: string\n    authorId!: string\n    embeds: Embed[] = []\n    deleted = false\n    mentions = new Mentions(this)\n    type: MessageTypes | 'UNKNOWN' = MessageTypes.TEXT\n    editedAt: Date | null = null\n    constructor(client: Client, data: RawMessage) {\n        super(client)\n        this._patch(data)\n    }\n\n    _update(data: RawMessage): this {\n        const clone = this._clone()\n        clone._patch(data)\n        return clone\n    }\n\n    _patch(data: RawMessage): this {\n        if (!data) return this\n\n        if (data._id) {\n            this.id = data._id\n        }\n\n        if (Array.isArray(data.embeds)) {\n            this.embeds = data.embeds\n        }\n\n        if (Array.isArray(data.mentions)) {\n            this.mentions._patch(data.mentions)\n        }\n\n        if (data.author) {\n            this.authorId = data.author\n        }\n\n        if (data.channel) {\n            this.channelId = data.channel\n        }\n\n        if (typeof data.content === 'object') {\n            this.type = MessageTypes[data.content.type.toUpperCase() as Uppercase<SystemMessage['type']>] ?? 'UNKNOWN'\n        } else if (typeof data.content === 'string') {\n            this.content = data.content\n        }\n\n        if (data.edited) {\n            this.editedAt = new Date(data.edited.$date)\n        }\n\n        return this\n    }\n\n    get createdAt(): Date {\n        return UUID.extrectTime(this.id)\n    }\n\n    get createdTimestamp(): number {\n        return this.createdAt.getTime()\n    }\n\n    get editedTimestamp(): number | null {\n        return this.editedAt?.getTime() ?? null\n    }\n\n    async ack(): Promise<void> {\n        await this.channel.messages.ack(this)\n    }\n\n    async delete(): Promise<void> {\n        await this.channel.messages.delete(this)\n    }\n\n    async reply(content: string, mention = true): Promise<unknown> {\n        return this.channel.messages.send({\n            content,\n            replies: [{ id: this.id, mention }]\n        })\n    }\n\n    async edit(content: string): Promise<void> {\n        await this.channel.messages.edit(this, { content })\n    }\n\n    fetch(): Promise<Message> {\n        return this.channel.messages.fetch(this.id)\n    }\n\n    get system(): boolean {\n        return this.type !== MessageTypes.TEXT\n    }\n\n    inServer(): this is this & { serverId: string; server: Server; channel: TextChannel } {\n        return this.channel.inServer()\n    }\n\n    get author(): User | null {\n        return this.client.users.cache.get(this.authorId) ?? null\n    }\n\n    get channel(): TextChannel | DMChannel | GroupChannel {\n        return this.client.channels.cache.get(this.channelId) as TextChannel\n    }\n\n    get serverId(): string | null {\n        const channel = this.channel\n        return channel.inServer() ? channel.serverId : null\n    }\n\n    get server(): Server | null {\n        return this.client.servers.cache.get(this.serverId as string) ?? null\n    }\n\n    get member(): ServerMember | null {\n        return this.server?.members.cache.get(this.authorId) ?? null\n    }\n\n    get url(): string {\n        return `https://app.revolt.chat/${this.serverId ? `server/${this.serverId}` : ''}/channel/${this.channelId}/${this.id}`\n    }\n}\n"]}