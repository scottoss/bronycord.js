{"version":3,"file":"TextChannel.js","sourceRoot":"","sources":["../../src/structures/TextChannel.ts"],"names":[],"mappings":";;;AACA,wBAA0C;AAG1C,0CAA4D;AAC5D,kCAAsC;AAEtC,MAAa,WAAY,SAAQ,gBAAa;IAI1C,YAAY,MAAc,EAAE,GAAmB;;QAC3C,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;QAJtB,kBAAa,GAAkB,IAAI,CAAA;QACnC,aAAQ,GAAG,IAAI,yBAAc,CAAC,IAAI,CAAC,CAAA;QAC1B,SAAI,GAAG,mBAAY,CAAC,IAAI,CAAA;QAG7B,IAAI,CAAC,aAAa,GAAG,MAAA,GAAG,CAAC,eAAe,mCAAI,IAAI,CAAA;IACpD,CAAC;IAED,IAAI,CAAC,OAAgC;QACjC,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;IACtC,CAAC;IAED,IAAI,WAAW;;QACX,IAAI,CAAC,IAAI,CAAC,aAAa;YAAE,OAAO,IAAI,CAAA;QACpC,OAAO,MAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,mCAAI,IAAI,CAAA;IAC9D,CAAC;CACJ;AAjBD,kCAiBC","sourcesContent":["import { TextChannel as RawTextChannel } from 'revolt-api/types/Channels'\nimport { Message, ServerChannel } from '.'\nimport { TextBasedChannel } from './interfaces/TextBasedChannel'\nimport { Client } from '..'\nimport { MessageManager, MessageOptions } from '../managers'\nimport { ChannelTypes } from '../util'\n\nexport class TextChannel extends ServerChannel implements TextBasedChannel {\n    lastMessageId: string | null = null\n    messages = new MessageManager(this)\n    readonly type = ChannelTypes.TEXT\n    constructor(client: Client, raw: RawTextChannel) {\n        super(client, raw)\n        this.lastMessageId = raw.last_message_id ?? null\n    }\n\n    send(options: MessageOptions | string): Promise<Message> {\n        return this.messages.send(options)\n    }\n\n    get lastMessage(): Message | null {\n        if (!this.lastMessageId) return null\n        return this.messages.cache.get(this.lastMessageId) ?? null\n    }\n}\n"]}