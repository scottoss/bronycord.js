{"version":3,"file":"GroupChannel.js","sourceRoot":"","sources":["../../src/structures/GroupChannel.ts"],"names":[],"mappings":"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","sourcesContent":["import { GroupChannel as RawGroupChannel } from 'revolt-api/types/Channels'\nimport { TextBasedChannel } from './interfaces/TextBasedChannel'\nimport { Client, User, UserResolvable } from '..'\nimport { TypeError } from '../errors'\nimport { ChannelPermissions, ChannelTypes, Collection } from '../util'\n\nexport class GroupChannel extends TextBasedChannel {\n    name!: string\n    description: string | null = null\n    ownerId!: string\n    readonly type = ChannelTypes.GROUP\n    permissions!: Readonly<ChannelPermissions>\n    icon: string | null = null\n    _users: string[] = []\n    constructor(client: Client, data: RawGroupChannel) {\n        super(client, data)\n        this._patch(data)\n    }\n\n    _patch(data: RawGroupChannel): this {\n        if (!data) return this\n\n        if ('description' in data) {\n            this.description = data.description ?? null\n        }\n\n        if (Array.isArray(data.recipients)) {\n            this._users = data.recipients\n        }\n\n        if (typeof data.permissions === 'number') {\n            this.permissions = new ChannelPermissions(data.permissions).freeze()\n        }\n\n        if (data.owner) {\n            this.ownerId = data.owner\n        }\n\n        if ('icon' in data) {\n            this.icon = data.icon?._id ?? null\n        }\n\n        if (data.name) {\n            this.name = data.name\n        }\n\n        return this\n    }\n\n    _update(data: RawGroupChannel): this {\n        const clone = this._clone()\n        this._patch(data)\n        return clone\n    }\n\n    async add(user: UserResolvable): Promise<void> {\n        const userId = this.client.users.resolveId(user)\n        if (!userId) throw new TypeError('INVALID_TYPE', 'user', 'UserResolvable')\n        await this.client.api.put(`/channels/${this.id}/recipients/${userId}`)\n    }\n\n    async remove(user: UserResolvable): Promise<void> {\n        const userId = this.client.users.resolveId(user)\n        if (!userId) throw new TypeError('INVALID_TYPE', 'user', 'UserResolvable')\n        await this.client.api.delete(`/channels/${this.id}/recipients/${userId}`)\n    }\n\n    async leave(): Promise<void> {\n        await super.delete()\n    }\n\n    iconURL(options?: { size: number }): string | null {\n        if (!this.icon) return null\n        return this.client.endpoints.icon(this.icon, options?.size)\n    }\n\n    get owner(): User | null {\n        return this.client.users.cache.get(this.ownerId) ?? null\n    }\n\n    get users(): Collection<string, User> {\n        const users = new Collection<string, User>()\n\n        for (const userId of this._users) {\n            const user = this.client.users.cache.get(userId)\n            if (user) users.set(user.id, user)\n        }\n\n        return users\n    }\n\n    get members(): Collection<string, User> {\n        return this.users\n    }\n}\n"]}