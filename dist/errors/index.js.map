{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/errors/index.ts"],"names":[],"mappings":";;;AAAA,yCAAqC;AAErC,MAAM,iBAAiB,GAAG,CAAC,IAAsB,EAAE,EAAE;IACjD,OAAO,MAAM,WAAqE,SAAQ,IAAI;QAC1F,YAAY,GAAM,EAAE,GAAG,IAAoC;YACvD,MAAM,GAAG,GAAG,mBAAQ,CAAC,GAAG,CAAmC,CAAA;YAC3D,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CAAA;YACnB,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,WAAW,CAAC,CAAA;QAC7C,CAAC;KACJ,CAAA;AACL,CAAC,CAAA;AAEY,QAAA,KAAK,GAAG,iBAAiB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;AAC3C,QAAA,SAAS,GAAG,iBAAiB,CAAC,UAAU,CAAC,SAAS,CAAC,CAAA;AACnD,QAAA,UAAU,GAAG,iBAAiB,CAAC,UAAU,CAAC,UAAU,CAAC,CAAA","sourcesContent":["import { Messages } from './Messages'\n\nconst createCustomError = (Base: ErrorConstructor) => {\n    return class RevoltError<K extends keyof typeof Messages = keyof typeof Messages> extends Base {\n        constructor(key: K, ...args: Parameters<typeof Messages[K]>) {\n            const msg = Messages[key] as (...args: unknown[]) => string\n            super(msg(...args))\n            Base.captureStackTrace(this, RevoltError)\n        }\n    }\n}\n\nexport const Error = createCustomError(globalThis.Error)\nexport const TypeError = createCustomError(globalThis.TypeError)\nexport const RangeError = createCustomError(globalThis.RangeError)\n"]}