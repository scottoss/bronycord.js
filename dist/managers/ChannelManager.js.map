{"version":3,"file":"ChannelManager.js","sourceRoot":"","sources":["../../src/managers/ChannelManager.ts"],"names":[],"mappings":";;;AACA,wBAA+B;AAE/B,sCAAqC;AACrC,8CAAqD;AACrD,kCAAsC;AAItC,MAAa,cAAe,SAAQ,cAAwC;IAGxE,YAAmB,MAAc;QAC7B,KAAK,EAAE,CAAA;QADQ,WAAM,GAAN,MAAM,CAAQ;QAFjC,UAAK,GAAG,IAAI,CAAA;IAIZ,CAAC;IAED,IAAI,CAAC,GAAe;QAChB,MAAM,OAAO,GAAG,oBAAO,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;QAEhD,IAAI,OAAO,CAAC,IAAI,KAAK,mBAAY,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE;YACzD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,OAAuB,CAAA;SACnD;QAED,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,CAAA;QAEnC,OAAO,OAAO,CAAA;IAClB,CAAC;IAED,OAAO,CAAC,EAAU;;QACd,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;QAElC,IAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,EAAE,EAAE;YACrB,MAAA,OAAO,CAAC,MAAM,0CAAE,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;SAC5C;QAED,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;IACrB,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,OAA0B;QACnC,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAA;QACzC,IAAI,CAAC,SAAS;YAAE,MAAM,IAAI,kBAAS,CAAC,cAAc,EAAE,SAAS,EAAE,mBAAmB,CAAC,CAAA;QACnF,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,aAAa,SAAS,EAAE,CAAC,CAAA;IAC1D,CAAC;IAED,KAAK,CAAC,GAAG,CAAC,OAA0B;QAChC,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAA;QACzC,IAAI,CAAC,SAAS;YAAE,MAAM,IAAI,kBAAS,CAAC,cAAc,EAAE,SAAS,EAAE,mBAAmB,CAAC,CAAA;QACnF,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,aAAa,SAAS,MAAM,CAAC,CAAA;IAC3D,CAAC;IAED,KAAK,CAAC,KAAK,CAAC,OAA0B,EAAE,EAAE,KAAK,GAAG,IAAI,EAAE,GAAG,EAAE;QACzD,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAA;QAEzC,IAAI,CAAC,SAAS;YAAE,MAAM,IAAI,kBAAS,CAAC,cAAc,EAAE,SAAS,EAAE,mBAAmB,CAAC,CAAA;QAEnF,IAAI,CAAC,KAAK,EAAE;YACR,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAA;YACzC,IAAI,OAAO;gBAAE,OAAO,OAAO,CAAA;SAC9B;QAED,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,aAAa,SAAS,EAAE,CAAC,CAAA;QAEhE,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAC1B,CAAC;IAED,OAAO,CAAC,OAA0B;QAC9B,IAAI,OAAO,YAAY,oBAAO;YAAE,OAAO,OAAO,CAAA;QAC9C,OAAO,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;IACjC,CAAC;IAED,SAAS,CAAC,OAA0B;QAChC,IAAI,OAAO,YAAY,oBAAO;YAAE,OAAO,OAAO,CAAC,EAAE,CAAA;QACjD,OAAO,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,CAAA;IACnC,CAAC;CACJ;AAjED,wCAiEC","sourcesContent":["import { Channel as RawChannel } from 'revolt-api/types/Channels'\nimport { BaseManager } from '.'\nimport { Client } from '..'\nimport { TypeError } from '../errors'\nimport { Channel, NotesChannel } from '../structures'\nimport { ChannelTypes } from '../util'\n\nexport type ChannelResolvable = Channel | RawChannel | string\n\nexport class ChannelManager extends BaseManager<string, Channel, RawChannel> {\n    holds = null\n\n    constructor(public client: Client) {\n        super()\n    }\n\n    _add(raw: RawChannel): Channel {\n        const channel = Channel.create(this.client, raw)\n\n        if (channel.type === ChannelTypes.NOTES && this.client.user) {\n            this.client.user.notes = channel as NotesChannel\n        }\n\n        this.cache.set(channel.id, channel)\n\n        return channel\n    }\n\n    _remove(id: string): void {\n        const channel = this.cache.get(id)\n\n        if (channel?.inServer()) {\n            channel.server?.channels.cache.delete(id)\n        }\n\n        super._remove(id)\n    }\n\n    async delete(channel: ChannelResolvable): Promise<void> {\n        const channelId = this.resolveId(channel)\n        if (!channelId) throw new TypeError('INVALID_TYPE', 'channel', 'ChannelResolvable')\n        await this.client.api.delete(`/channels/${channelId}`)\n    }\n\n    async ack(channel: ChannelResolvable): Promise<void> {\n        const channelId = this.resolveId(channel)\n        if (!channelId) throw new TypeError('INVALID_TYPE', 'channel', 'ChannelResolvable')\n        await this.client.api.put(`/channels/${channelId}/ack`)\n    }\n\n    async fetch(channel: ChannelResolvable, { force = true } = {}): Promise<Channel> {\n        const channelId = this.resolveId(channel)\n\n        if (!channelId) throw new TypeError('INVALID_TYPE', 'channel', 'ChannelResolvable')\n\n        if (!force) {\n            const channel = this.cache.get(channelId)\n            if (channel) return channel\n        }\n\n        const data = await this.client.api.get(`/channels/${channelId}`)\n\n        return this._add(data)\n    }\n\n    resolve(channel: ChannelResolvable): Channel | null {\n        if (channel instanceof Channel) return channel\n        return super.resolve(channel)\n    }\n\n    resolveId(channel: ChannelResolvable): string | null {\n        if (channel instanceof Channel) return channel.id\n        return super.resolveId(channel)\n    }\n}\n"]}