{"version":3,"file":"BaseManager.js","sourceRoot":"","sources":["../../src/managers/BaseManager.ts"],"names":[],"mappings":";;;AACA,kCAAoC;AAEpC,MAAsB,WAAW;IAAjC;QACa,UAAK,GAAG,IAAI,iBAAU,EAAY,CAAA;IA0C/C,CAAC;IAxCG,IAAI,CAAC,GAAM;QACP,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACb,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAA;SACxC;QACD,MAAM,GAAG,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;QAC5C,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAA;QAC3B,OAAO,GAAG,CAAA;IACd,CAAC;IAED,OAAO,CAAC,EAAK;QACT,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;IACzB,CAAC;IAQD,OAAO,CAAC,UAAyB;;QAC7B,IAAI,UAAU,IAAI,IAAI;YAAE,OAAO,IAAI,CAAA;QACnC,IAAI,OAAO,UAAU,KAAK,QAAQ;YAAE,OAAO,MAAA,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAe,CAAC,mCAAI,IAAI,CAAA;QAClF,IAAI,IAAI,CAAC,KAAK,IAAI,UAAU,YAAY,IAAI,CAAC,KAAK;YAAE,OAAO,UAAU,CAAA;QACrE,MAAM,GAAG,GAAG,UAAmC,CAAA;QAC/C,IAAI,KAAK,IAAI,GAAG;YAAE,OAAO,MAAA,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,mCAAI,IAAI,CAAA;QACxD,OAAO,IAAI,CAAA;IACf,CAAC;IAED,SAAS,CAAC,UAAyB;;QAC/B,IAAI,UAAU,IAAI,IAAI;YAAE,OAAO,IAAI,CAAA;QACnC,IAAI,OAAO,UAAU,KAAK,QAAQ;YAAE,OAAO,UAAe,CAAA;QAC1D,IAAI,IAAI,CAAC,KAAK,IAAI,UAAU,YAAY,IAAI,CAAC,KAAK;YAAE,OAAO,UAAU,CAAC,EAAE,CAAA;QACxE,MAAM,GAAG,GAAG,UAAmC,CAAA;QAC/C,IAAI,KAAK,IAAI,GAAG;YAAE,MAAA,GAAG,CAAC,GAAG,mCAAI,IAAI,CAAA;QACjC,OAAO,IAAI,CAAA;IACf,CAAC;IAED,OAAO;QACH,OAAO,IAAI,CAAC,KAAK,CAAA;IACrB,CAAC;CACJ;AA3CD,kCA2CC","sourcesContent":["import { Client } from '..'\nimport { Collection } from '../util'\n\nexport abstract class BaseManager<K, Holds extends { id: K }, R extends unknown = unknown> {\n    readonly cache = new Collection<K, Holds>()\n\n    _add(raw: R): Holds {\n        if (!this.holds) {\n            throw new Error('No \"holds\" exists.')\n        }\n        const obj = new this.holds(this.client, raw)\n        this.cache.set(obj.id, obj)\n        return obj\n    }\n\n    _remove(id: K): void {\n        this.cache.delete(id)\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    abstract readonly holds: (new (...args: any[]) => Holds) | null\n    abstract readonly client: Client\n\n    resolve(resolvable: Holds): Holds | null\n    resolve(resolvable: K | R): Holds | null\n    resolve(resolvable: K | R | Holds): Holds | null\n    resolve(resolvable: K | R | Holds): Holds | null {\n        if (resolvable == null) return null\n        if (typeof resolvable === 'string') return this.cache.get(resolvable as K) ?? null\n        if (this.holds && resolvable instanceof this.holds) return resolvable\n        const raw = resolvable as unknown as { _id: K }\n        if ('_id' in raw) return this.cache.get(raw._id) ?? null\n        return null\n    }\n\n    resolveId(resolvable: K | Holds | R): K | null {\n        if (resolvable == null) return null\n        if (typeof resolvable === 'string') return resolvable as K\n        if (this.holds && resolvable instanceof this.holds) return resolvable.id\n        const raw = resolvable as unknown as { _id: K }\n        if ('_id' in raw) raw._id ?? null\n        return null\n    }\n\n    valueOf(): this['cache'] {\n        return this.cache\n    }\n}\n"]}