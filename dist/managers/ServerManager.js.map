{"version":3,"file":"ServerManager.js","sourceRoot":"","sources":["../../src/managers/ServerManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { Server as RawServer } from 'revolt-api/types/Servers'\nimport { BaseManager } from '.'\nimport { Client } from '..'\nimport { TypeError } from '../errors'\nimport { Server } from '../structures'\nimport { UUID } from '../util'\n\nexport type ServerResolvable = Server | RawServer | string\n\nexport interface EditServerOptions {\n    name?: string\n    description?: string\n}\n\nexport class ServerManager extends BaseManager<string, Server, RawServer> {\n    readonly holds = Server\n\n    constructor(public client: Client) {\n        super()\n    }\n\n    _remove(id: string): void {\n        const server = this.cache.get(id)\n\n        for (const channelId of server?._channels ?? []) {\n            this.client.channels._remove(channelId)\n        }\n\n        return super._remove(id)\n    }\n\n    async create(name: string): Promise<Server> {\n        const data = await this.client.api.post('/servers/create', {\n            body: {\n                name,\n                nonce: UUID.generate()\n            }\n        })\n        return this._add(data)\n    }\n\n    async edit(server: ServerResolvable, options: EditServerOptions): Promise<void> {\n        const serverId = this.resolveId(server)\n        if (!serverId) throw new TypeError('INVALID_TYPE', 'server', 'ServerResolvable')\n        await this.client.api.patch(`/servers/${serverId}`, {\n            body: options\n        })\n    }\n\n    async ack(server: ServerResolvable): Promise<void> {\n        const serverId = this.resolveId(server)\n        if (!serverId) throw new TypeError('INVALID_TYPE', 'server', 'ServerResolvable')\n        await this.client.api.put(`/servers/${serverId}/ack`)\n    }\n\n    async delete(server: ServerResolvable): Promise<void> {\n        const serverId = this.resolveId(server)\n        if (!serverId) throw new TypeError('INVALID_TYPE', 'server', 'ServerResolvable')\n        await this.client.api.delete(`/servers/${serverId}`)\n    }\n\n    async fetch(server: ServerResolvable, { force = true } = {}): Promise<Server> {\n        const serverId = this.resolveId(server)\n\n        if (!serverId) throw new TypeError('INVALID_TYPE', 'server', 'ServerResolvable')\n\n        if (!force) {\n            const server = this.cache.get(serverId)\n            if (server) return server\n        }\n\n        const data = await this.client.api.get(`/servers/${serverId}`)\n\n        return this._add(data)\n    }\n}\n"]}