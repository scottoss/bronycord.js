{"version":3,"file":"UserManager.js","sourceRoot":"","sources":["../../src/managers/UserManager.ts"],"names":[],"mappings":";;;AACA,wBAA+B;AAE/B,sCAAqC;AACrC,8CAA6C;AAI7C,MAAa,WAAY,SAAQ,cAAkC;IAE/D,YAAmB,MAAc;QAC7B,KAAK,EAAE,CAAA;QADQ,WAAM,GAAN,MAAM,CAAQ;QADjC,UAAK,GAAG,iBAAI,CAAA;IAGZ,CAAC;IAED,KAAK,CAAC,KAAK,CAAC,IAAoB,EAAE,EAAE,KAAK,GAAG,IAAI,EAAE,GAAG,EAAE;QACnD,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;QAEnC,IAAI,CAAC,MAAM;YAAE,MAAM,IAAI,kBAAS,CAAC,cAAc,EAAE,MAAM,EAAE,gBAAgB,CAAC,CAAA;QAE1E,IAAI,CAAC,KAAK,EAAE;YACR,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;YACnC,IAAI,IAAI;gBAAE,OAAO,IAAI,CAAA;SACxB;QAED,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,MAAM,EAAE,CAAC,CAAA;QAE1D,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAC1B,CAAC;IAID,OAAO,CAAC,UAA6C;QACjD,IAAI,UAAU,YAAY,oBAAO;YAAE,OAAO,UAAU,CAAC,MAAM,CAAA;QAC3D,OAAO,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAA;IACpC,CAAC;IAED,SAAS,CAAC,UAA0B;QAChC,IAAI,UAAU,YAAY,oBAAO;YAAE,OAAO,UAAU,CAAC,QAAQ,CAAA;QAC7D,OAAO,KAAK,CAAC,SAAS,CAAC,UAAU,CAAC,CAAA;IACtC,CAAC;CACJ;AAhCD,kCAgCC","sourcesContent":["import { User as RawUser } from 'revolt-api/types/Users'\nimport { BaseManager } from '.'\nimport { Client } from '../client/Client'\nimport { TypeError } from '../errors'\nimport { Message, User } from '../structures'\n\nexport type UserResolvable = User | RawUser | Message | string\n\nexport class UserManager extends BaseManager<string, User, RawUser> {\n    holds = User\n    constructor(public client: Client) {\n        super()\n    }\n\n    async fetch(user: UserResolvable, { force = true } = {}): Promise<User> {\n        const userId = this.resolveId(user)\n\n        if (!userId) throw new TypeError('INVALID_TYPE', 'user', 'UserResolvable')\n\n        if (!force) {\n            const user = this.cache.get(userId)\n            if (user) return user\n        }\n\n        const data = await this.client.api.get(`/users/${userId}`)\n\n        return this._add(data)\n    }\n\n    resolve(resolvable: Message | User): User\n    resolve(resolvable: string | RawUser): User | null\n    resolve(resolvable: User | RawUser | string | Message): User | null {\n        if (resolvable instanceof Message) return resolvable.author\n        return super.resolve(resolvable)\n    }\n\n    resolveId(resolvable: UserResolvable): string | null {\n        if (resolvable instanceof Message) return resolvable.authorId\n        return super.resolveId(resolvable)\n    }\n}\n"]}