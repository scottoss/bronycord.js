{"version":3,"file":"ServerMamberManager.js","sourceRoot":"","sources":["../../src/managers/ServerMamberManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { Member as RawMember } from 'revolt-api/types/Servers'\nimport { BaseManager } from '.'\nimport { TypeError } from '../errors'\nimport { Server, ServerMember, User } from '../structures'\nimport { Collection } from '../util'\n\nexport type ServerMemberResolvable = ServerMember | User | RawMember | string\n\nexport interface EditServerMemberOptions {\n    nickname?: string\n    avatar?: string\n    roles?: string[]\n}\n\nexport class ServerMemberManager extends BaseManager<string, ServerMember, RawMember> {\n    holds = ServerMember\n    client = this.server.client\n    constructor(public server: Server) {\n        super()\n    }\n\n    async edit(member: ServerMemberResolvable, options: EditServerMemberOptions): Promise<void> {\n        const memberId = this.resolveId(member)\n        if (!memberId) throw new TypeError('INVALID_TYPE', 'member', 'ServerMemberResolvable')\n        await this.client.api.patch(`/servers/${this.server.id}/members/${memberId}`, {\n            body: { ...options }\n        })\n    }\n\n    async ban(member: ServerMemberResolvable, reason?: string): Promise<void> {\n        const memberId = this.resolveId(member)\n        if (!memberId) throw new TypeError('INVALID_TYPE', 'member', 'ServerMemberResolvable')\n        await this.client.api.put(`/servers/${this.server.id}/bans/${memberId}`, {\n            body: { reason }\n        })\n    }\n\n    async kick(member: ServerMemberResolvable): Promise<void> {\n        const memberId = this.resolveId(member)\n        if (!memberId) throw new TypeError('INVALID_TYPE', 'member', 'ServerMemberResolvable')\n        await this.client.api.delete(`/servers/${this.server.id}/members/${memberId}`)\n    }\n\n    async unban(member: ServerMemberResolvable): Promise<void> {\n        const memberId = this.resolveId(member)\n        if (!memberId) throw new TypeError('INVALID_TYPE', 'member', 'ServerMemberResolvable')\n        await this.client.api.delete(`/servers/${this.server.id}/bans/${memberId}`)\n    }\n\n    async fetch(member: ServerMemberResolvable): Promise<ServerMember>\n    async fetch(): Promise<Collection<string, ServerMember>>\n    async fetch(member?: ServerMemberResolvable): Promise<ServerMember | Collection<string, ServerMember>> {\n        if (typeof member !== 'undefined') {\n            const memberId = this.resolveId(member)\n            if (!memberId) throw new TypeError('INVALID_TYPE', 'member', 'ServerMemberResolvable')\n            const data = await this.client.api.get(`/servers/${this.server.id}/members/${memberId}`)\n            return this._add(data)\n        }\n\n        const { members } = await this.client.api.get(`/servers/${this.server.id}/members`)\n\n        return (members as RawMember[]).reduce((coll, cur) => {\n            const member = this._add(cur)\n            coll.set(member.id, member)\n            return coll\n        }, new Collection<string, ServerMember>())\n    }\n\n    resolveId(member: ServerMemberResolvable): string | null {\n        if (member == null) return null\n        if (member instanceof ServerMember || member instanceof User) return member.id\n        if (typeof member === 'string') return member\n        if ('_id' in member) return member._id.user\n        return null\n    }\n}\n"]}