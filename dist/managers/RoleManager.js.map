{"version":3,"file":"RoleManager.js","sourceRoot":"","sources":["../../src/managers/RoleManager.ts"],"names":[],"mappings":";;;AACA,wBAA+B;AAC/B,sCAAqC;AACrC,8CAA4C;AAI5C,MAAa,WAAY,SAAQ,cAAmD;IAGhF,YAAmB,MAAc;QAC7B,KAAK,EAAE,CAAA;QADQ,WAAM,GAAN,MAAM,CAAQ;QAFjC,UAAK,GAAG,iBAAI,CAAA;QACZ,WAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAA;QAGvB,KAAK,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;YACpD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAA;SACzC;IACL,CAAC;IAED,IAAI,CAAC,IAA8B;QAC/B,MAAM,IAAI,GAAG,IAAI,iBAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAA;QACxC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;QAC7B,OAAO,IAAI,CAAA;IACf,CAAC;IAED,OAAO,CAAC,EAAU;QACd,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;QAC7B,OAAO,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;IAC5B,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,IAAY;QACrB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE;YACxE,IAAI,EAAE,EAAE,IAAI,EAAE;SACjB,CAAC,CAAA;QACF,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAA;IAChE,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,IAAoB;QAC7B,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;QACnC,IAAI,CAAC,MAAM;YAAE,MAAM,IAAI,kBAAS,CAAC,cAAc,EAAE,MAAM,EAAE,gBAAgB,CAAC,CAAA;QAC1E,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,MAAM,CAAC,EAAE,UAAU,MAAM,EAAE,CAAC,CAAA;IAC5E,CAAC;CACJ;AAjCD,kCAiCC","sourcesContent":["import { Role as RawRole } from 'revolt-api/types/Servers'\nimport { BaseManager } from '.'\nimport { TypeError } from '../errors'\nimport { Role, Server } from '../structures'\n\nexport type RoleResolvable = Role | string\n\nexport class RoleManager extends BaseManager<string, Role, RawRole & { id: string }> {\n    holds = Role\n    client = this.server.client\n    constructor(public server: Server) {\n        super()\n        for (const [id, role] of Object.entries(server._roles)) {\n            this._add(Object.assign(role, { id }))\n        }\n    }\n\n    _add(data: RawRole & { id: string }): Role {\n        const role = new Role(this.server, data)\n        this.cache.set(role.id, role)\n        return role\n    }\n\n    _remove(id: string): void {\n        delete this.server._roles[id]\n        return super._remove(id)\n    }\n\n    async create(name: string): Promise<Role> {\n        const data = await this.client.api.post(`/servers/${this.server.id}/roles`, {\n            body: { name }\n        })\n        return this._add(Object.assign(data, { name, id: data.id }))\n    }\n\n    async delete(role: RoleResolvable): Promise<void> {\n        const roleId = this.resolveId(role)\n        if (!roleId) throw new TypeError('INVALID_TYPE', 'role', 'RoleResolvable')\n        await this.client.api.post(`/servers/${this.server.id}/roles/${roleId}`)\n    }\n}\n"]}