{"version":3,"file":"ServerChannelManager.js","sourceRoot":"","sources":["../../src/managers/ServerChannelManager.ts"],"names":[],"mappings":";;;AACA,wBAA+B;AAE/B,sCAAqC;AACrC,8CAAgF;AAChF,kCAA8B;AAU9B,MAAa,oBAAqB,SAAQ,cAAkC;IAGxE,YAAmB,MAAc;QAC7B,KAAK,EAAE,CAAA;QADQ,WAAM,GAAN,MAAM,CAAQ;QADjC,UAAK,GAAG,0BAAa,CAAA;QAGjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAA;QAC3B,KAAK,MAAM,SAAS,IAAI,MAAM,CAAC,SAAS,EAAE;YACtC,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAA;YACzD,IAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,EAAE;gBAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,CAAA;SAC/D;IACL,CAAC;IAED,IAAI,CAAC,GAAe;QAChB,IAAI,OAAsB,CAAA;QAE1B,QAAQ,GAAG,CAAC,YAAY,EAAE;YACtB,KAAK,aAAa;gBACd,OAAO,GAAG,IAAI,wBAAW,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;gBAC3C,MAAK;YACT,KAAK,cAAc;gBACf,OAAO,GAAG,IAAI,yBAAY,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;gBAC5C,MAAK;YACT;gBACI,MAAM,IAAI,KAAK,CAAC,yBAAyB,GAAG,CAAC,YAAY,EAAE,CAAC,CAAA;SACnE;QAED,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,CAAA;QAEnC,OAAO,OAAO,CAAA;IAClB,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,IAAI,GAAG,MAAM,EAAE,WAAW,EAAwB;QACnE,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,MAAM,CAAC,EAAE,WAAW,EAAE;YAC3E,IAAI,EAAE;gBACF,IAAI;gBACJ,IAAI;gBACJ,WAAW;gBACX,KAAK,EAAE,WAAI,CAAC,QAAQ,EAAE;aACzB;SACJ,CAAC,CAAA;QACF,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAC1B,CAAC;IAED,KAAK,CAAC,KAAK,CAAC,OAAgC,EAAE,EAAE,KAAK,GAAG,IAAI,EAAE,GAAG,EAAE;QAC/D,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAA;QAEzC,IAAI,CAAC,SAAS;YAAE,MAAM,IAAI,kBAAS,CAAC,cAAc,EAAE,SAAS,EAAE,yBAAyB,CAAC,CAAA;QAEzF,IAAI,CAAC,KAAK,EAAE;YACR,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAA;YACzC,IAAI,OAAO;gBAAE,OAAO,OAAO,CAAA;SAC9B;QAED,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,YAAY,IAAI,CAAC,MAAM,CAAC,EAAE,aAAa,SAAS,EAAE,CAAC,CAAA;QAE1F,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAC1B,CAAC;CACJ;AAzDD,oDAyDC","sourcesContent":["import { Channel as RawChannel, ServerChannel as RawServerChannel } from 'revolt-api/types/Channels'\nimport { BaseManager } from '.'\nimport { Client } from '..'\nimport { TypeError } from '../errors'\nimport { Server, ServerChannel, TextChannel, VoiceChannel } from '../structures'\nimport { UUID } from '../util'\n\nexport type ServerChannelResolvable = ServerChannel | RawServerChannel | string\n\nexport interface CreateChannelOptions {\n    name: string\n    type?: 'Text' | 'Voice'\n    description?: string\n}\n\nexport class ServerChannelManager extends BaseManager<string, ServerChannel> {\n    client: Client\n    holds = ServerChannel\n    constructor(public server: Server) {\n        super()\n        this.client = server.client\n        for (const channelId of server._channels) {\n            const channel = this.client.channels.cache.get(channelId)\n            if (channel?.inServer()) this.cache.set(channel.id, channel)\n        }\n    }\n\n    _add(raw: RawChannel): ServerChannel {\n        let channel: ServerChannel\n\n        switch (raw.channel_type) {\n            case 'TextChannel':\n                channel = new TextChannel(this.client, raw)\n                break\n            case 'VoiceChannel':\n                channel = new VoiceChannel(this.client, raw)\n                break\n            default:\n                throw new Error(`Unknown channel type: ${raw.channel_type}`)\n        }\n\n        this.cache.set(channel.id, channel)\n\n        return channel\n    }\n\n    async create({ name, type = 'Text', description }: CreateChannelOptions): Promise<ServerChannel> {\n        const data = await this.client.api.post(`/servers/${this.server.id}/channels`, {\n            body: {\n                name,\n                type,\n                description,\n                nonce: UUID.generate()\n            }\n        })\n        return this._add(data)\n    }\n\n    async fetch(channel: ServerChannelResolvable, { force = true } = {}): Promise<ServerChannel> {\n        const channelId = this.resolveId(channel)\n\n        if (!channelId) throw new TypeError('INVALID_TYPE', 'channel', 'ServerChannelResolvable')\n\n        if (!force) {\n            const channel = this.cache.get(channelId)\n            if (channel) return channel\n        }\n\n        const data = await this.client.api.get(`/servers/${this.server.id}/channels/${channelId}`)\n\n        return this._add(data)\n    }\n}\n"]}