{"version":3,"file":"Permissions.js","sourceRoot":"","sources":["../../src/util/Permissions.ts"],"names":[],"mappings":";;;AAAA,yCAAqC;AACrC,2CAA8C;AA8B9C,MAAa,kBAAmB,SAAQ,mBAAQ;IAE5C,YAAY,IAAmC;QAC3C,KAAK,CAAC,IAAI,CAAC,CAAA;IACf,CAAC;IACD,MAAM,CAAC,OAAO,CAAC,GAAiC;QAC5C,OAAO,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;IAC7B,CAAC;;AAPL,gDAQC;AAPmB,wBAAK,GAAG,4BAAgB,CAAC,OAAO,CAAA;AASpD,MAAa,eAAgB,SAAQ,mBAAQ;IAEzC,YAAY,IAAgC;QACxC,KAAK,CAAC,IAAI,CAAC,CAAA;IACf,CAAC;IACD,MAAM,CAAC,OAAO,CAAC,GAA8B;QACzC,OAAO,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;IAC7B,CAAC;;AAPL,0CAQC;AAPmB,qBAAK,GAAG,4BAAgB,CAAC,IAAI,CAAA;AASjD,MAAa,iBAAkB,SAAQ,mBAAQ;IAE3C,YAAY,IAAkC;QAC1C,KAAK,CAAC,IAAI,CAAC,CAAA;IACf,CAAC;IACD,MAAM,CAAC,OAAO,CAAC,GAAgC;QAC3C,OAAO,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;IAC7B,CAAC;;AAPL,8CAQC;AAPmB,uBAAK,GAAG,4BAAgB,CAAC,MAAM,CAAA;AAStC,QAAA,qBAAqB,GAAG,IAAI,kBAAkB,CAAC;IACxD,cAAc;IACd,cAAc;IACd,gBAAgB;IAChB,YAAY;IACZ,aAAa;IACb,cAAc;CACjB,CAAC,CAAC,MAAM,EAAE,CAAA","sourcesContent":["import { BitField } from './BitField'\nimport { PermissionsFlags } from './Constants'\n\nexport type ChannelPermissionsResolvable<T = keyof typeof PermissionsFlags.CHANNEL> = number | T | ChannelPermissions | ChannelPermissionsResolvable[]\nexport type UserPermissionsResolvable<T = keyof typeof PermissionsFlags.USER> = number | T | UserPermissions | UserPermissionsResolvable[]\nexport type ServerPermissionsResolvable<T = keyof typeof PermissionsFlags.SERVER> = number | T | ServerPermissions | ServerPermissionsResolvable[]\n\nexport declare interface ServerPermissions {\n    serialize(): Record<keyof typeof PermissionsFlags.SERVER, boolean>\n    any(bit: ServerPermissionsResolvable): boolean\n    add(...bits: ServerPermissionsResolvable[]): this\n    remove(...bits: ServerPermissionsResolvable[]): this\n    has(bit: ServerPermissionsResolvable): boolean\n}\n\nexport declare interface ChannelPermissions {\n    serialize(): Record<keyof typeof PermissionsFlags.CHANNEL, boolean>\n    any(bit: ChannelPermissionsResolvable): boolean\n    add(...bits: ChannelPermissionsResolvable[]): this\n    remove(...bits: ChannelPermissionsResolvable[]): this\n    has(bit: ChannelPermissionsResolvable): boolean\n}\n\nexport declare interface UserPermissions {\n    serialize(): Record<keyof typeof PermissionsFlags.USER, boolean>\n    any(bit: UserPermissionsResolvable): boolean\n    add(...bits: UserPermissionsResolvable[]): this\n    remove(...bits: UserPermissionsResolvable[]): this\n    has(bit: UserPermissionsResolvable): boolean\n}\n\nexport class ChannelPermissions extends BitField {\n    static readonly FLAGS = PermissionsFlags.CHANNEL\n    constructor(bits?: ChannelPermissionsResolvable) {\n        super(bits)\n    }\n    static resolve(bit: ChannelPermissionsResolvable): number {\n        return super.resolve(bit)\n    }\n}\n\nexport class UserPermissions extends BitField {\n    static readonly FLAGS = PermissionsFlags.USER\n    constructor(bits?: UserPermissionsResolvable) {\n        super(bits)\n    }\n    static resolve(bit: UserPermissionsResolvable): number {\n        return super.resolve(bit)\n    }\n}\n\nexport class ServerPermissions extends BitField {\n    static readonly FLAGS = PermissionsFlags.SERVER\n    constructor(bits?: ServerPermissionsResolvable) {\n        super(bits)\n    }\n    static resolve(bit: ServerPermissionsResolvable): number {\n        return super.resolve(bit)\n    }\n}\n\nexport const DEFAULT_PERMISSION_DM = new ChannelPermissions([\n    'VIEW_CHANNEL',\n    'VIEW_CHANNEL',\n    'MANAGE_CHANNEL',\n    'VOICE_CALL',\n    'EMBED_LINKS',\n    'UPLOAD_FILES'\n]).freeze()\n"]}