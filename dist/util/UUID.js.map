{"version":3,"file":"UUID.js","sourceRoot":"","sources":["../../src/util/UUID.ts"],"names":[],"mappings":";;;AAAA,mCAAoC;AAEpC,MAAa,IAAK,SAAQ,IAAI;IAM1B,MAAM,KAAK,IAAI;QACX,OAAO,IAAA,oBAAW,EAAC,CAAC,CAAC,CAAC,SAAS,EAAE,GAAG,IAAI,CAAA;IAC5C,CAAC;IAEO,MAAM,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE;QAChC,IAAI,GAAW,EACX,MAAM,GAAG,EAAE,CAAA;QAEf,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YACvC,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,eAAe,CAAA;YAChC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAA;YAC3C,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,eAAe,CAAA;SAC3C;QAED,OAAO,MAAM,CAAA;IACjB,CAAC;IAEO,MAAM,CAAC,IAAI;QACf,IAAI,MAAM,GAAG,EAAE,CAAA;QAEf,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YACzC,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,CAAA;YAEzD,IAAI,MAAM,KAAK,IAAI,CAAC,eAAe,EAAE;gBACjC,MAAM,GAAG,IAAI,CAAC,eAAe,GAAG,CAAC,CAAA;aACpC;YAED,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,CAAA;SACjD;QAED,OAAO,MAAM,CAAA;IACjB,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE;QAClC,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAA;IAC7C,CAAC;IAED,MAAM,CAAC,WAAW,CAAC,EAAU;QACzB,MAAM,SAAS,GAAG,EAAE;aACf,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC;aAC3B,KAAK,CAAC,EAAE,CAAC;aACT,OAAO,EAAE;aACT,MAAM,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;YAC3B,MAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;YAEjD,IAAI,aAAa,KAAK,CAAC,CAAC,EAAE;gBACtB,MAAM,IAAI,KAAK,CAAC,2BAA2B,GAAG,IAAI,CAAC,CAAA;aACtD;YAED,OAAO,CAAC,KAAK,IAAI,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC,CAAA;QAC3E,CAAC,EAAE,CAAC,CAAC,CAAA;QAET,OAAO,IAAI,IAAI,CAAC,SAAS,CAAC,CAAA;IAC9B,CAAC;;AA3DL,oBA4DC;AA3DmB,aAAQ,GAAG,kCAAkC,CAAA;AAC7C,oBAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAA;AACtC,kBAAa,GAAG,EAAE,CAAA;AAClB,gBAAW,GAAG,EAAE,CAAA;AAChB,aAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAA","sourcesContent":["import { randomBytes } from 'crypto'\n\nexport class UUID extends null {\n    static readonly ENCODING = '0123456789ABCDEFGHJKMNPQRSTVWXYZ'\n    static readonly ENCODING_LENGTH = UUID.ENCODING.length\n    static readonly RANDOM_LENGTH = 16\n    static readonly TIME_LENGTH = 10\n    static readonly TIME_MAX = Math.pow(2, 48) - 1\n    static get PROG(): number {\n        return randomBytes(1).readUInt8() / 0xff\n    }\n\n    private static time(now = Date.now()): string {\n        let mod: number,\n            result = ''\n\n        for (let i = this.TIME_LENGTH; i > 0; i--) {\n            mod = now % this.ENCODING_LENGTH\n            result = this.ENCODING.charAt(mod) + result\n            now = (now - mod) / this.ENCODING_LENGTH\n        }\n\n        return result\n    }\n\n    private static hash(): string {\n        let result = ''\n\n        for (let i = this.RANDOM_LENGTH; i > 0; i--) {\n            let random = Math.floor(this.PROG * this.ENCODING_LENGTH)\n\n            if (random === this.ENCODING_LENGTH) {\n                random = this.ENCODING_LENGTH - 1\n            }\n\n            result = this.ENCODING.charAt(random) + result\n        }\n\n        return result\n    }\n\n    static generate(timestamp = Date.now()): string {\n        return this.time(timestamp) + this.hash()\n    }\n\n    static extrectTime(id: string): Date {\n        const timestamp = id\n            .substr(0, this.TIME_LENGTH)\n            .split('')\n            .reverse()\n            .reduce((carry, char, index) => {\n                const encodingIndex = this.ENCODING.indexOf(char)\n\n                if (encodingIndex === -1) {\n                    throw new Error('invalid character found: ' + char)\n                }\n\n                return (carry += encodingIndex * Math.pow(this.ENCODING_LENGTH, index))\n            }, 0)\n\n        return new Date(timestamp)\n    }\n}\n"]}