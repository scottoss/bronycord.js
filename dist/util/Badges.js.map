{"version":3,"file":"Badges.js","sourceRoot":"","sources":["../../src/util/Badges.ts"],"names":[],"mappings":";;;AAAA,yCAAqC;AACrC,2CAAyC;AAYzC,MAAa,MAAO,SAAQ,mBAAQ;IAEhC,YAAY,IAAuB;QAC/B,KAAK,CAAC,IAAI,CAAC,CAAA;IACf,CAAC;IACD,MAAM,CAAC,OAAO,CAAC,GAAqB;QAChC,OAAO,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;IAC7B,CAAC;;AAPL,wBAQC;AAPmB,YAAK,GAAG,uBAAW,CAAA","sourcesContent":["import { BitField } from './BitField'\nimport { BadgesFlags } from './Constants'\n\nexport type BadgesResolvable = number | keyof typeof BadgesFlags | BadgesResolvable[]\n\nexport declare interface Badges {\n    serialize(): Record<keyof typeof BadgesFlags, boolean>\n    any(bit: BadgesResolvable): boolean\n    add(...bits: BadgesResolvable[]): this\n    remove(...bits: BadgesResolvable[]): this\n    has(bit: BadgesResolvable): boolean\n}\n\nexport class Badges extends BitField {\n    static readonly FLAGS = BadgesFlags\n    constructor(bits?: BadgesResolvable) {\n        super(bits)\n    }\n    static resolve(bit: BadgesResolvable): number {\n        return super.resolve(bit)\n    }\n}\n"]}