{"version":3,"file":"REST.js","sourceRoot":"","sources":["../../src/rest/REST.ts"],"names":[],"mappings":";;;AACA,mCAAqC;AACrC,2CAAqC;AACrC,6CAAyC;AACzC,2CAAuC;AACvC,yCAA6C;AAE7C,kCAAgC;AAEhC,IAAY,aAMX;AAND,WAAY,aAAa;IACrB,kCAAiB,CAAA;IACjB,4BAAW,CAAA;IACX,gCAAe,CAAA;IACf,8BAAa,CAAA;IACb,4BAAW,CAAA;AACf,CAAC,EANW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAMxB;AAuBD,MAAa,IAAK,SAAQ,qBAAY;IAClC,YAAoB,MAAkB,EAAU,OAAoB;QAChE,KAAK,EAAE,CAAA;QADS,WAAM,GAAN,MAAM,CAAY;QAAU,YAAO,GAAP,OAAO,CAAa;IAEpE,CAAC;IAGD,KAAK,CAAC,OAAO,CAAC,OAAqC;;QAC/C,MAAM,OAAO,GAAG,OAAO,YAAY,uBAAU,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,uBAAU,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,CAAA;QAE1G,IAAI,CAAC,CAAC,OAAO,YAAY,uBAAU,CAAC,EAAE;YAClC,OAAO;iBACF,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC;iBACzB,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;iBACrB,UAAU,CAAC,MAAA,OAAO,CAAC,OAAO,mCAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA;SAC1D;QAED,IAAI,GAAa,CAAA;QAEjB,IAAI;YACA,GAAG,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAA;SACjE;QAAC,OAAO,KAAK,EAAE;YACZ,IAAI,OAAO,CAAC,OAAO,KAAK,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;gBAC1C,IAAI,KAAK,YAAY,qBAAQ,EAAE;oBAC3B,MAAM,IAAI,qBAAS,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAA;iBACvF;aACJ;YAED,OAAO,CAAC,OAAO,EAAE,CAAA;YAEjB,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;SAC/B;QAED,IAAI,GAAG,CAAC,EAAE,EAAE;YACR,OAAO,IAAA,qBAAa,EAAC,GAAG,CAAC,CAAA;SAC5B;QAGD,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;YACpB,IAAI,CAAC,MAAM,CAAC,IAAI,CACZ,aAAM,CAAC,KAAK,EACZ;oBACI,OAAO,CAAC,MAAM;kBAChB,OAAO,CAAC,IAAI;mBACX,IAAI,CAAC,OAAO,CAAC,OAAO;qBAClB,IAAI,CAAC,OAAO,CAAC,OAAO,IAAI,CAChC,CAAA;SACJ;QAED,IAAI,GAAG,CAAC,MAAM,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,GAAG,GAAG,EAAE;YACvC,IAAI,OAAO,CAAC,OAAO,KAAK,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;gBAC1C,MAAM,IAAI,qBAAS,CAAC,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC,WAAW,CAAC,IAAI,EAAE,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAA;aACjF;YAED,OAAO,CAAC,OAAO,EAAE,CAAA;YAEjB,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;SAC/B;QAED,MAAM,IAAI,qBAAS,CAAC,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC,WAAW,CAAC,IAAI,EAAE,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAA;IAClF,CAAC;IAED,GAAG,CAAC,KAAgB,EAAE,UAAuB,EAAE;QAC3C,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,aAAa,CAAC,GAAG,EAAE,CAAC,CAAA;IACzE,CAAC;IAED,MAAM,CAAC,KAAgB,EAAE,UAAuB,EAAE;QAC9C,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,aAAa,CAAC,MAAM,EAAE,CAAC,CAAA;IAC5E,CAAC;IAED,IAAI,CAAC,KAAgB,EAAE,UAAuB,EAAE;QAC5C,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,aAAa,CAAC,IAAI,EAAE,CAAC,CAAA;IAC1E,CAAC;IAED,GAAG,CAAC,KAAgB,EAAE,UAAuB,EAAE;QAC3C,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,aAAa,CAAC,GAAG,EAAE,CAAC,CAAA;IACzE,CAAC;IAED,KAAK,CAAC,KAAgB,EAAE,UAAuB,EAAE;QAC7C,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,aAAa,CAAC,KAAK,EAAE,CAAC,CAAA;IAC3E,CAAC;CACJ;AAhFD,oBAgFC","sourcesContent":["/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { EventEmitter } from 'events'\nimport { Response } from 'node-fetch'\nimport { APIRequest } from './APIRequest'\nimport { HTTPError } from './HTTPError'\nimport { parseResponse } from './utils/utils'\nimport { BaseClient } from '../client/BaseClient'\nimport { Events } from '../util'\n\nexport enum RequestMethod {\n    Delete = 'DELETE',\n    Get = 'GET',\n    Patch = 'PATCH',\n    Post = 'POST',\n    Put = 'PUT'\n}\n\nexport type RouteLike = `/${string}`\n\nexport interface RequestData {\n    body?: unknown\n    headers?: Record<string, string>\n}\n\nexport interface InternalRequest extends RequestData {\n    method: RequestMethod\n    route: RouteLike\n}\n\nexport interface RESTOptions {\n    api: string\n    cdn: string\n    invite: string\n    offset: number\n    retries: number\n    timeout: number\n}\n\nexport class REST extends EventEmitter {\n    constructor(private client: BaseClient, private options: RESTOptions) {\n        super()\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async request(options: InternalRequest | APIRequest): Promise<any> {\n        const request = options instanceof APIRequest ? options : new APIRequest(this.options.api + options.route)\n\n        if (!(options instanceof APIRequest)) {\n            request\n                .setMethod(options.method)\n                .setBody(options.body)\n                .setHeaders(options.headers ?? this.client.headers)\n        }\n\n        let res: Response\n\n        try {\n            res = await request.execute({ timeout: this.options.timeout })\n        } catch (error) {\n            if (request.retries === this.options.retries) {\n                if (error instanceof Response) {\n                    throw new HTTPError(error.statusText, error.constructor.name, error.status, request)\n                }\n            }\n\n            request.retries++\n\n            return this.request(request)\n        }\n\n        if (res.ok) {\n            return parseResponse(res)\n        }\n\n        // TODO: Handle ratelimit\n        if (res.status === 429) {\n            this.client.emit(\n                Events.DEBUG,\n                `Hit a 429 while executing a request.\n          Method: ${request.method}\n          Path: ${request.path}\n          Limit: ${this.options.retries}\n          Timeout: ${this.options.timeout}ms`\n            )\n        }\n\n        if (res.status >= 500 && res.status < 600) {\n            if (request.retries === this.options.retries) {\n                throw new HTTPError(res.statusText, res.constructor.name, res.status, request)\n            }\n\n            request.retries++\n\n            return this.request(request)\n        }\n\n        throw new HTTPError(res.statusText, res.constructor.name, res.status, request)\n    }\n\n    get(route: RouteLike, options: RequestData = {}) {\n        return this.request({ ...options, route, method: RequestMethod.Get })\n    }\n\n    delete(route: RouteLike, options: RequestData = {}) {\n        return this.request({ ...options, route, method: RequestMethod.Delete })\n    }\n\n    post(route: RouteLike, options: RequestData = {}) {\n        return this.request({ ...options, route, method: RequestMethod.Post })\n    }\n\n    put(route: RouteLike, options: RequestData = {}) {\n        return this.request({ ...options, route, method: RequestMethod.Put })\n    }\n\n    patch(route: RouteLike, options: RequestData = {}) {\n        return this.request({ ...options, route, method: RequestMethod.Patch })\n    }\n}\n"]}