{"version":3,"file":"APIRequest.js","sourceRoot":"","sources":["../../src/rest/APIRequest.ts"],"names":[],"mappings":";;;;;;AAAA,4DAAyD;AACzD,iCAAsC;AAMtC,MAAa,UAAU;IAKnB,YAAmB,IAAY;QAAZ,SAAI,GAAJ,IAAI,CAAQ;QAFxB,WAAM,GAAkB,oBAAa,CAAC,GAAG,CAAA;QACzC,YAAO,GAAG,CAAC,CAAA;IACgB,CAAC;IAEnC,IAAI,IAAI;;QACJ,OAAO;YACH,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,MAAA,IAAI,CAAC,IAAI,mCAAI,IAAI,CAAC;SACtC,CAAA;IACL,CAAC;IAED,SAAS,CAAC,MAAqB;QAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACpB,OAAO,IAAI,CAAA;IACf,CAAC;IAED,OAAO,CAAC,IAAc;QAClB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAA;QACnD,OAAO,IAAI,CAAA;IACf,CAAC;IAED,UAAU,CAAC,OAAoB;QAC3B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QACtB,OAAO,IAAI,CAAA;IACf,CAAC;IAED,OAAO,CAAC,OAA0B;QAC9B,MAAM,UAAU,GAAG,IAAI,eAAe,EAAE,CAAA;QACxC,MAAM,OAAO,GAAG,UAAU,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,CAAA;QAC7E,OAAO,IAAA,oBAAK,EAAC,IAAI,CAAC,IAAI,EAAE;YACpB,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,OAAO,EAAE,IAAI,CAAC,OAAsB;YACpC,MAAM,EAAE,UAAU,CAAC,MAAM;SAC5B,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAA;IAC3C,CAAC;CACJ;AAvCD,gCAuCC","sourcesContent":["import fetch, { Response, HeadersInit } from 'node-fetch'\nimport { RequestMethod } from './REST'\n\nexport interface APIRequestOptions {\n    timeout: number\n}\n\nexport class APIRequest {\n    private body?: string\n    private headers?: HeadersInit\n    public method: RequestMethod = RequestMethod.Get\n    public retries = 0\n    constructor(public path: string) {}\n\n    get info(): Record<string, unknown> {\n        return {\n            retries: this.retries,\n            body: JSON.parse(this.body ?? '{}')\n        }\n    }\n\n    setMethod(method: RequestMethod): this {\n        this.method = method\n        return this\n    }\n\n    setBody(body?: unknown): this {\n        this.body = body ? JSON.stringify(body) : undefined\n        return this\n    }\n\n    setHeaders(headers: HeadersInit): this {\n        this.headers = headers\n        return this\n    }\n\n    execute(options: APIRequestOptions): Promise<Response> {\n        const controller = new AbortController()\n        const timeout = setTimeout(() => controller.abort(), options.timeout).unref()\n        return fetch(this.path, {\n            method: this.method,\n            body: this.body,\n            headers: this.headers as HeadersInit,\n            signal: controller.signal\n        }).finally(() => clearTimeout(timeout))\n    }\n}\n"]}