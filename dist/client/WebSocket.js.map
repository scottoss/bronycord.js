{"version":3,"file":"WebSocket.js","sourceRoot":"","sources":["../../src/client/WebSocket.ts"],"names":[],"mappings":"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","sourcesContent":["import { default as Socket } from 'ws'\nimport { Client } from './Client'\nimport { ClientUser } from '../structures'\nimport { Events, WSEvents } from '../util'\n\nexport interface WSOptions {\n    heartbeat: number\n}\n\nexport class WebSocket {\n    heartbeatInterval?: NodeJS.Timer\n    lastPingTimestamp?: number\n    lastPongAcked = false\n    socket: Socket | null = null\n    connected = false\n    ready = false\n\n    constructor(public client: Client) {}\n\n    private debug(message: unknown): void {\n        this.client.emit(Events.DEBUG, `[WS]: ${message}`)\n    }\n\n    get ping(): number {\n        if (!this.lastPingTimestamp) return -0\n        return Date.now() - this.lastPingTimestamp\n    }\n\n    setHeartbeatTimer(time: number): void {\n        this.debug(`Setting a heartbeat interval for ${time}ms.`)\n\n        if (time === -1) {\n            if (this.heartbeatInterval) clearInterval(this.heartbeatInterval)\n        } else {\n            this.heartbeatInterval = setInterval(() => this.sendHeartbeat(), time).unref()\n        }\n    }\n\n    sendHeartbeat(skip = false): void {\n        if (!skip && !this.lastPongAcked) {\n            this.debug(\"Didn't receive a pong ack last time.\")\n        }\n\n        const now = Date.now()\n\n        this.debug('Sending a heartbeat.')\n        this.send({ type: WSEvents.PING, data: now })\n        this.lastPongAcked = false\n        this.lastPingTimestamp = now\n    }\n\n    async send(data: unknown): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (this.socket?.readyState === Socket.OPEN) {\n                this.socket.send(JSON.stringify(data), err => {\n                    if (err) return reject(err)\n                    resolve()\n                })\n            } else {\n                this.debug(`Tried to send packet '${JSON.stringify(data)}' but no WebSocket is available!`)\n                resolve()\n            }\n        })\n    }\n\n    private onError(event: Socket.ErrorEvent): void {\n        const error = event?.error ?? event\n\n        if (error) {\n            this.client.emit(Events.ERROR, error)\n        }\n    }\n\n    private onMessage({ data }: Socket.MessageEvent): void {\n        let packet: unknown\n\n        try {\n            packet = JSON.parse(data as unknown as string)\n        } catch (err) {\n            this.client.emit(Events.ERROR, err)\n            return\n        }\n\n        this.client.emit(Events.RAW, packet)\n\n        this.onPacket(packet)\n    }\n\n    private async onOpen(): Promise<void> {\n        await this.send({\n            type: WSEvents.AUTHENTICATE,\n            token: this.client.token\n        })\n    }\n\n    private onClose(event: Socket.CloseEvent): void {\n        this.debug(`[WS] Closed with reason: ${event.reason}, code: ${event.code}`)\n        this.destroy()\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private onPacket(packet: any) {\n        if (!packet) {\n            this.debug(`Received broken packet: '${packet}'.`)\n            return\n        }\n\n        switch (packet.type) {\n            case WSEvents.AUTHENTICATED:\n                this.connected = true\n                break\n            case WSEvents.PONG:\n                this.lastPongAcked = true\n                break\n            case WSEvents.ERROR:\n                this.client.emit(Events.ERROR, packet.error)\n                break\n            case WSEvents.READY:\n                this.lastPongAcked = true\n\n                for (const user of packet.users) {\n                    this.client.users._add(user)\n                    if (user.relationship === 'User' && !this.client.user) {\n                        const clientUser = (this.client.user = new ClientUser(this.client, user))\n                        this.client.users.cache.set(clientUser.id, clientUser)\n                    }\n                }\n\n                for (const server of packet.servers) {\n                    this.client.servers._add(server)\n                }\n\n                for (const channel of packet.channels) {\n                    this.client.channels._add(channel)\n                }\n\n                for (const member of packet.members) {\n                    this.client.servers.cache.get(member._id.server)?.members._add(member)\n                }\n\n                this.setHeartbeatTimer(this.client.options.ws.heartbeat)\n\n                this.ready = true\n\n                this.client.emit(Events.READY, this.client)\n\n                break\n            default: {\n                const action = this.client.actions.get(packet.type)\n\n                if (action) {\n                    action.handle(packet)\n                } else {\n                    this.debug(`Received unknown packet \"${packet.type}\"`)\n                }\n\n                break\n            }\n        }\n    }\n\n    connect(): Promise<this> {\n        return new Promise(resolve => {\n            if (this.socket?.readyState === Socket.OPEN && this.ready) {\n                return resolve(this)\n            }\n\n            if (typeof this.client.configuration === 'undefined') {\n                throw new Error('Attempted to open WebSocket without syncing configuration from server.')\n            }\n\n            if (typeof this.client.token === 'undefined') {\n                throw new Error('Attempted to open WebSocket without valid token.')\n            }\n\n            const ws = (this.socket = this.socket ?? new Socket(this.client.configuration.ws))\n\n            ws.onopen = this.onOpen.bind(this)\n            ws.onmessage = this.onMessage.bind(this)\n            ws.onerror = this.onError.bind(this)\n            ws.onclose = this.onClose.bind(this)\n            ws.once('open', () => resolve(this))\n        })\n    }\n\n    destroy(): Promise<this> {\n        return new Promise(resolve => {\n            this.setHeartbeatTimer(-1)\n            this.connected = false\n            this.ready = false\n\n            if (this.socket?.readyState === Socket.OPEN) {\n                this.socket.close()\n                this.socket.once('close', () => resolve(this))\n            } else {\n                resolve(this)\n            }\n        })\n    }\n}\n"]}