{"version":3,"file":"Client.js","sourceRoot":"","sources":["../../src/client/Client.ts"],"names":[],"mappings":";;;AAEA,6CAAyC;AACzC,2CAAuC;AACvC,2DAAuD;AACvD,0CAAwE;AAExE,iDAA0C;AAI1C,MAAa,MAAO,SAAQ,uBAAU;IAAtC;;QACqB,OAAE,GAAc,IAAI,qBAAS,CAAC,IAAI,CAAC,CAAA;QACpC,YAAO,GAAG,IAAI,6BAAa,CAAC,IAAI,CAAC,CAAA;QACjC,aAAQ,GAAG,IAAI,yBAAc,CAAC,IAAI,CAAC,CAAA;QAE5C,YAAO,GAAgB,IAAI,CAAA;QAClB,YAAO,GAAG,IAAI,wBAAa,CAAC,IAAI,CAAC,CAAA;QAC1C,SAAI,GAAsB,IAAI,CAAA;QACrB,UAAK,GAAG,IAAI,sBAAW,CAAC,IAAI,CAAC,CAAA;IAgDjD,CAAC;IA9CG,IAAI,cAAc;;QACd,OAAO,MAAA,MAAA,IAAI,CAAC,OAAO,0CAAE,OAAO,EAAE,mCAAI,IAAI,CAAA;IAC1C,CAAC;IAED,IAAI,MAAM;QACN,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,IAAI,CAAA;IACpE,CAAC;IAED,KAAK,CAAC,KAAK,CAAC,OAAqB;QAC7B,IAAI,CAAC,aAAa,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;QAE5C,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC7B,MAAM,EAAE,IAAI,GAAG,KAAK,EAAE,KAAK,EAAE,GAAG,OAAO,CAAA;YACvC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;YAClB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,WAAW,EAAE,KAAK,KAAK,CAAA;SAC1C;aAAM;YACH,IAAI,CAAC,KAAK,GAAG,OAAO,CAAA;YACpB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAA;SAClB;QAED,IAAI,CAAC,KAAK,CAAC,wCAAwC,CAAC,CAAA;QAEpD,IAAI;YACA,MAAM,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,CAAA;SAC1B;QAAC,OAAO,GAAG,EAAE;YACV,MAAM,IAAI,CAAC,OAAO,EAAE,CAAA;YACpB,MAAM,GAAG,CAAA;SACZ;QAED,IAAI,CAAC,OAAO,GAAG,IAAI,IAAI,EAAE,CAAA;IAC7B,CAAC;IAED,KAAK,CAAC,OAAO;QACT,IAAI,CAAC,KAAK,GAAG,IAAI,CAAA;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAChB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAA;QACnB,MAAM,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,CAAA;IAC3B,CAAC;IAEO,KAAK,CAAC,OAAe;QACzB,IAAI,CAAC,IAAI,CAAC,kBAAM,CAAC,KAAK,EAAE,OAAO,CAAC,CAAA;IACpC,CAAC;IAED,OAAO;QACH,OAAO,IAAI,CAAC,OAAO,IAAI,IAAI,CAAA;IAC/B,CAAC;CACJ;AAxDD,wBAwDC","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { RevoltConfiguration } from 'revolt-api/types/Core'\nimport { BaseClient } from './BaseClient'\nimport { WebSocket } from './WebSocket'\nimport { ActionManager } from './actions/ActionManager'\nimport { ChannelManager, ServerManager, UserManager } from '../managers'\nimport { ClientUser } from '../structures/ClientUser'\nimport { Events } from '../util/Constants'\n\nexport type LoginDetails = string | { token: string; type?: 'bot' | 'user' }\n\nexport class Client extends BaseClient {\n    private readonly ws: WebSocket = new WebSocket(this)\n    public readonly actions = new ActionManager(this)\n    public readonly channels = new ChannelManager(this)\n    public configuration?: RevoltConfiguration\n    public readyAt: Date | null = null\n    public readonly servers = new ServerManager(this)\n    public user: ClientUser | null = null\n    public readonly users = new UserManager(this)\n\n    get readyTimestamp(): number | null {\n        return this.readyAt?.getTime() ?? null\n    }\n\n    get uptime(): number | null {\n        return this.readyAt ? Date.now() - this.readyAt.getTime() : null\n    }\n\n    async login(details: LoginDetails): Promise<void> {\n        this.configuration = await this.api.get('/')\n\n        if (typeof details === 'object') {\n            const { type = 'bot', token } = details\n            this.token = token\n            this.bot = type.toLowerCase() === 'bot'\n        } else {\n            this.token = details\n            this.bot = true\n        }\n\n        this.debug('Preparing to connect to the gateway...')\n\n        try {\n            await this.ws.connect()\n        } catch (err) {\n            await this.destroy()\n            throw err\n        }\n\n        this.readyAt = new Date()\n    }\n\n    async destroy(): Promise<void> {\n        this.token = null\n        this.user = null\n        this.readyAt = null\n        await this.ws.destroy()\n    }\n\n    private debug(message: string): void {\n        this.emit(Events.DEBUG, message)\n    }\n\n    isReady(): boolean {\n        return this.readyAt != null\n    }\n}\n"]}