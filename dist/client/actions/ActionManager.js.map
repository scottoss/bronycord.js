{"version":3,"file":"ActionManager.js","sourceRoot":"","sources":["../../../src/client/actions/ActionManager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,2CAA4B;AAI5B,MAAa,aAAa;IAGtB,YAAmB,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;QAFzB,YAAO,GAA+B,EAAE,CAAA;QAG5C,KAAK,MAAM,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;YACzC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;SACxB;IACL,CAAC;IAED,QAAQ,CAAC,MAA0C;QAC/C,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;IAC9E,CAAC;IAED,GAAG,CAAC,IAAY;;QACZ,OAAO,MAAA,IAAI,CAAC,OAAO,CAAC,IAA2B,CAAC,mCAAI,IAAI,CAAA;IAC5D,CAAC;CACJ;AAhBD,sCAgBC","sourcesContent":["import * as Actions from '.'\nimport { Action as BaseAction } from './Action'\nimport { Client } from '../Client'\n\nexport class ActionManager {\n    private actions: Record<string, BaseAction> = {}\n\n    constructor(public client: Client) {\n        for (const Action of Object.values(Actions)) {\n            this.register(Action)\n        }\n    }\n\n    register(Action: new (client: Client) => BaseAction): void {\n        this.actions[Action.name.replace(/Action$/, '')] = new Action(this.client)\n    }\n\n    get(name: string): BaseAction | null {\n        return this.actions[name as keyof ActionManager] ?? null\n    }\n}\n"]}