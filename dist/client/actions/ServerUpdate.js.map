{"version":3,"file":"ServerUpdate.js","sourceRoot":"","sources":["../../../src/client/actions/ServerUpdate.ts"],"names":[],"mappings":";;;AACA,qCAAiC;AACjC,oDAA6C;AAE7C,MAAa,kBAAmB,SAAQ,eAAM;IAC1C,MAAM,CAAC,IAAqC;QACxC,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;QAExD,IAAI,SAAS,EAAE;YACX,MAAM,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YAE9C,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,EAAE,SAAS,CAAC,CAAA;YAEtD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAM,CAAC,aAAa,EAAE,SAAS,EAAE,SAAS,CAAC,CAAA;YAE5D,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,CAAA;SAClC;QAED,OAAO,EAAE,SAAS,EAAE,CAAA;IACxB,CAAC;CACJ;AAhBD,gDAgBC","sourcesContent":["import { Server as RawServer } from 'revolt-api/types/Servers'\nimport { Action } from './Action'\nimport { Events } from '../../util/Constants'\n\nexport class ServerUpdateAction extends Action {\n    handle(data: { id: string; data: RawServer }): unknown {\n        const oldServer = this.client.servers.cache.get(data.id)\n\n        if (oldServer) {\n            const newServer = oldServer._update(data.data)\n\n            this.client.servers.cache.set(newServer.id, newServer)\n\n            this.client.emit(Events.SERVER_UPDATE, oldServer, newServer)\n\n            return { newServer, oldServer }\n        }\n\n        return { oldServer }\n    }\n}\n"]}