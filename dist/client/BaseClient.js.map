{"version":3,"file":"BaseClient.js","sourceRoot":"","sources":["../../src/client/BaseClient.ts"],"names":[],"mappings":";;;AACA,mCAAqC;AAGrC,0BAA6D;AAC7D,iDAA6C;AAC7C,uCAAgD;AAmDhD,MAAa,UAAW,SAAQ,qBAAY;IAKxC,YAAY,UAAsC,EAAE;QAChD,KAAK,EAAE,CAAA;QAJJ,UAAK,GAAkB,IAAI,CAAA;QAC3B,QAAG,GAAG,IAAI,CAAA;QACV,YAAO,GAAkB,EAAE,GAAG,mBAAe,EAAE,CAAA;QAGlD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAA;QACpC,IAAI,CAAC,GAAG,GAAG,IAAI,WAAI,CAAC,IAAI,EAAE,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAA;IACvD,CAAC;IAED,IAAI,SAAS;QACT,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAA;QAC9C,OAAO,IAAI,qBAAS,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,CAAA;IAC9C,CAAC;IAED,IAAI,OAAO;QACP,IAAI,CAAC,IAAI,CAAC,KAAK;YAAE,OAAO,EAAE,CAAA;QAC1B,OAAO;YACH,CAAC,KAAK,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,QAAQ,CAAC,EAAE,IAAI,CAAC,KAAK;SAC1D,CAAA;IACL,CAAC;CACJ;AAtBD,gCAsBC","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { EventEmitter } from 'events'\nimport { HeadersInit } from 'node-fetch'\nimport { WSOptions } from './WebSocket'\nimport { Client, DEFUALT_OPTIONS, Message, Server } from '..'\nimport { Endpoints } from '../rest/Endpoints'\nimport { REST, RESTOptions } from '../rest/REST'\nimport { Channel, GroupChannel, Role, ServerMember, User } from '../structures'\nimport { TextBasedChannel } from '../structures/interfaces/TextBasedChannel'\n\nexport type Awaited<T> = T | Promise<T>\n\nexport interface ClientEvents {\n    message: [Message]\n    messageDelete: [Message]\n    messageUpdate: [Message, Message]\n    ready: [Client]\n    serverCreate: [Server]\n    serverDelete: [Server]\n    serverUpdate: [Server, Server]\n    debug: [string]\n    error: [unknown]\n    raw: [unknown]\n    userUpdate: [User, User]\n    serverMemberJoin: [ServerMember]\n    channelUpdate: [Channel, Channel]\n    serverMemberLeave: [ServerMember]\n    serverMemberUpdate: [ServerMember, ServerMember]\n    roleDelete: [Role]\n    typingStart: [TextBasedChannel, User]\n    typingStop: [TextBasedChannel, User]\n    groupJoin: [GroupChannel, User]\n    groupLeave: [GroupChannel, User]\n}\n\nexport declare interface BaseClient {\n    on<K extends keyof ClientEvents>(event: K, listener: (...args: ClientEvents[K]) => Awaited<void>): this\n    on<S extends string | symbol>(event: Exclude<S, keyof ClientEvents>, listener: (...args: any[]) => Awaited<void>): this\n    once<K extends keyof ClientEvents>(event: K, listener: (...args: ClientEvents[K]) => Awaited<void>): this\n    once<S extends string | symbol>(event: Exclude<S, keyof ClientEvents>, listener: (...args: any[]) => Awaited<void>): this\n    emit<K extends keyof ClientEvents>(event: K, ...args: ClientEvents[K]): boolean\n    emit<S extends string | symbol>(event: Exclude<S, keyof ClientEvents>, ...args: unknown[]): boolean\n    off<K extends keyof ClientEvents>(event: K, listener: (...args: ClientEvents[K]) => Awaited<void>): this\n    off<S extends string | symbol>(event: Exclude<S, keyof ClientEvents>, listener: (...args: any[]) => Awaited<void>): this\n    removeAllListeners<K extends keyof ClientEvents>(event?: K): this\n    removeAllListeners<S extends string | symbol>(event?: Exclude<S, keyof ClientEvents>): this\n}\n\ntype DeepPartial<T> = {\n    [P in keyof T]?: DeepPartial<T[P]>\n}\n\nexport interface ClientOptions {\n    http: RESTOptions\n    ws: WSOptions\n}\n\nexport class BaseClient extends EventEmitter {\n    public readonly api: REST\n    public token: string | null = null\n    public bot = true\n    public options: ClientOptions = { ...DEFUALT_OPTIONS }\n    constructor(options: DeepPartial<ClientOptions> = {}) {\n        super()\n        Object.assign(this.options, options)\n        this.api = new REST(this, { ...this.options.http })\n    }\n\n    get endpoints(): Endpoints {\n        const { api, cdn, invite } = this.options.http\n        return new Endpoints({ api, cdn, invite })\n    }\n\n    get headers(): HeadersInit {\n        if (!this.token) return {}\n        return {\n            [`x-${this.bot ? 'bot' : 'session'}-token`]: this.token\n        }\n    }\n}\n"]}